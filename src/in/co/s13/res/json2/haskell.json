{"haskell.json": [
    {
        "include": {"context": [
            {"ref": "def:in-comment"},
            {"ref": "haddock:line-paragraph"},
            {"ref": "haddock:directive"}
        ]},
        "class-disabled": "no-spell-check",
        "start": "(?<!\\%{symbolchar})--+(?!\\%{symbolchar})",
        "id": "line-comment",
        "class": "comment",
        "style-ref": "comment",
        "end-at-line-end": true
    },
    {
        "include": {"context": [
            {"ref": "def:in-comment"},
            {"ref": "haddock:block-paragraph"},
            {"ref": "haddock:directive"},
            {"ref": "block-comment"}
        ]},
        "class-disabled": "no-spell-check",
        "start": "\\{-",
        "end": "-\\}",
        "id": "block-comment",
        "class": "comment",
        "style-ref": "comment"
    },
    {
        "start": "\\{-#",
        "end": "#-\\}",
        "id": "pragma",
        "style-ref": "preprocessor"
    },
    {
        "match": "\\b[a-z_][0-9a-zA-Z_'#]*",
        "id": "variable",
        "style-ref": "variable"
    },
    {
        "match": "\\b[A-Z][0-9a-zA-Z._'#]*",
        "id": "type-or-constructor",
        "style-ref": "type"
    },
    {
        "match": "\\%{symbolchar}+",
        "id": "symbol",
        "style-ref": "symbol",
        "extend-parent": false
    },
    {
        "prefix": "(?<!\\%{symbolchar})",
        "id": "keysymbol",
        "suffix": "(?!\\%{symbolchar})",
        "keyword": [
            "\\.\\.",
            "::",
            "=",
            "\\|",
            "\\",
            "->",
            "<-",
            "@",
            "~",
            "=>"
        ],
        "style-ref": "keyword"
    },
    {
        "include": {"context": [
            {"ref": "def:line-continue"},
            {
                "match": "\\%{escaped-character}",
                "style-ref": "char-escape"
            }
        ]},
        "class-disabled": "no-spell-check",
        "start": "\"",
        "end": "\"",
        "id": "string",
        "class": "string",
        "style-ref": "string",
        "end-at-line-end": true
    },
    {
        "include": {"context": [
            {
                "once-only": true,
                "match": "\\%{escaped-character}",
                "style-ref": "char-escape"
            },
            {
                "once-only": true,
                "match": ".",
                "extend-parent": false
            },
            {
                "match": ".",
                "style-ref": "def:error",
                "extend-parent": false
            }
        ]},
        "start": "'",
        "end": "'",
        "id": "char",
        "style-ref": "character",
        "end-at-line-end": true
    },
    {
        "match": {
            "extended": true,
            "content": "[0-9]+ \\. [0-9]+ ([eE][+-]?[0-9]+)?\n        | [0-9]+            [eE][+-]?[0-9]+"
        },
        "id": "float",
        "style-ref": "float"
    },
    {
        "match": "0[xX][0-9a-fA-F]+",
        "id": "hexadecimal",
        "style-ref": "hexadecimal"
    },
    {
        "match": "0[oO][0-7]+",
        "id": "octal",
        "style-ref": "octal"
    },
    {
        "match": "[0-9]+",
        "id": "decimal",
        "style-ref": "decimal"
    },
    {
        "id": "keyword",
        "keyword": [
            "case",
            "class",
            "data",
            "default",
            "deriving",
            "do",
            "mdo",
            "else",
            "forall",
            "foreign",
            "hiding",
            "if",
            "import",
            "in",
            "infix",
            "infixl",
            "infixr",
            "instance",
            "let",
            "module",
            "newtype",
            "of",
            "qualified",
            "then",
            "where",
            "type"
        ],
        "style-ref": "keyword"
    },
    {
        "include": {"context": [
            {"ref": "line-comment"},
            {"ref": "pragma"},
            {"ref": "block-comment"},
            {"ref": "keyword"},
            {"ref": "variable"},
            {"ref": "type-or-constructor"},
            {"ref": "keysymbol"},
            {"ref": "symbol"},
            {"ref": "string"},
            {"ref": "char"},
            {"ref": "float"},
            {"ref": "hexadecimal"},
            {"ref": "octal"},
            {"ref": "decimal"}
        ]},
        "id": "body"
    },
    {
        "include": {"context": [
            {"ref": "def:shebang"},
            {"ref": "c:if0-comment"},
            {"ref": "c:include"},
            {"ref": "c:preprocessor"},
            {"ref": "body"}
        ]},
        "id": "haskell",
        "class": "no-spell-check"
    }
]}