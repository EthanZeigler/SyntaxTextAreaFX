{"fsharp.json": [
    {
        "match": "\\%{char-esc}",
        "id": "escape-seq",
        "style-ref": "escape"
    },
    {
        "include": {"context": {"ref": "def:in-line-comment"}},
        "class-disabled": "no-spell-check",
        "start": "//",
        "id": "line-comment",
        "class": "comment",
        "style-ref": "comment",
        "end-at-line-end": true
    },
    {
        "include": {"context": [
            {"ref": "string"},
            {"ref": "def:in-comment:*"}
        ]},
        "class-disabled": "no-spell-check",
        "start": "\\(\\*",
        "end": "\\*\\)",
        "id": "multiline-comment",
        "class": "comment",
        "style-ref": "comment"
    },
    {
        "include": {"context": [
            {
                "include": {"context": [
                    {"ref": "if-in-if0"},
                    {"ref": "def:in-comment"}
                ]},
                "start": "\\%{preproc-start}if(n?def)?\\b",
                "end": "\\%{preproc-start}endif\\b",
                "id": "if-in-if0"
            },
            {"ref": "def:in-comment"}
        ]},
        "class-disabled": "no-spell-check",
        "start": "\\%{preproc-start}if\\b\\s*0\\b",
        "end": "\\%{preproc-start}(endif|else|elif)\\b",
        "id": "if0-comment",
        "class": "comment",
        "style-ref": "comment"
    },
    {
        "include": {"context": [
            {
                "ref": "def:line-continue",
                "ignore-style": true
            },
            {
                "ref": "string",
                "ignore-style": true
            },
            {"ref": "line-comment"},
            {"ref": "multiline-comment"}
        ]},
        "start": {
            "extended": true,
            "content": "\\%{preproc-start}\n        (if(n?def)?|else|endif|light|region|endregion)\\b"
        },
        "id": "preprocessor",
        "style-ref": "preprocessor",
        "end-at-line-end": true
    },
    {
        "match": "[-]?0[xX][0-9A-Fa-f][0-9A-Fa-f_]*[lL]?",
        "id": "hex-number",
        "style-ref": "base-n-integer"
    },
    {
        "match": "[-]?0[oO][0-7][0-7_]*[lL]?",
        "id": "octal-number",
        "style-ref": "base-n-integer"
    },
    {
        "match": "[-]?0[bB][01][01_]*[lL]?",
        "id": "binary-number",
        "style-ref": "base-n-integer"
    },
    {
        "match": "[~?]\\%{low-ident}",
        "id": "label",
        "style-ref": "label"
    },
    {
        "include": {"context": [
            {
                "include": {"context": [
                    {"ref": "if-in-if-false"},
                    {"ref": "def:in-comment"}
                ]},
                "start": "\\%{preproc-start}if(n?def)?\\b",
                "end": "\\%{preproc-start}endif\\b",
                "id": "if-in-if-false"
            },
            {"ref": "def:in-comment"}
        ]},
        "start": "\\%{preproc-start}if\\s*false\\b",
        "end": "\\%{preproc-start}(endif|else|elif)\\b",
        "id": "if-false-comment",
        "style-ref": "comment"
    },
    {
        "match": "`\\%{cap-ident}",
        "id": "poly-variant",
        "style-ref": "poly-variant"
    },
    {
        "match": "\\%{cap-ident}(\\.\\%{cap-ident})*(?=\\.)",
        "id": "modpath",
        "style-ref": "module"
    },
    {
        "match": "\\%{cap-ident}",
        "id": "variant",
        "style-ref": "variant"
    },
    {
        "include": {"context": {"ref": "escape-seq"}},
        "start": "\"",
        "end": "\"",
        "id": "string",
        "style-ref": "string"
    },
    {
        "match": "('\\%{char-esc}')|('[^\\\\']')",
        "id": "character-constant",
        "style-ref": "string"
    },
    {
        "match": "'\\%{low-ident}",
        "id": "type-var",
        "style-ref": "type-var"
    },
    {
        "start": "\\[\\|",
        "end": "\\|\\]",
        "id": "arraylit"
    },
    {
        "match": {
            "extended": true,
            "content": "(?<![\\w\\.])\n        [0-9]+[uUlL]*\n        (?![\\w\\.])"
        },
        "id": "decimal",
        "style-ref": "decimal"
    },
    {
        "id": "boolean-constant",
        "keyword": [
            true,
            false
        ],
        "style-ref": "boolean"
    },
    {
        "prefix": "(?<!\\%{symbolchar})",
        "id": "keysymbol",
        "suffix": "(?!\\%{symbolchar})",
        "keyword": [
            "\\.\\.",
            "::",
            "=",
            "@",
            "~",
            "->",
            "|",
            ":?",
            ":?>",
            "^",
            "<-",
            "&&",
            "&"
        ],
        "style-ref": "keyword"
    },
    {
        "id": "keywords",
        "keyword": [
            "abstract",
            "and",
            "as",
            "assert",
            "asr",
            "begin",
            "class",
            "default",
            "delegate",
            "do",
            "done",
            "downcast",
            "downto",
            "else",
            "end",
            "enum",
            "exception",
            false,
            "finaly",
            "for",
            "fun",
            "function",
            "if",
            "in",
            "iherit",
            "interface",
            "land",
            "lazy",
            "let",
            "lor",
            "lsl",
            "lsr",
            "lxor",
            "match",
            "member",
            "mod",
            "module",
            "mutable",
            "namespace",
            "new",
            null,
            "of",
            "open",
            "or",
            "override",
            "sig",
            "static",
            "struct",
            "then",
            "to",
            true,
            "try",
            "type",
            "val",
            "when",
            "inline",
            "upcast",
            "while",
            "with",
            "async",
            "atomic",
            "break",
            "checked",
            "component",
            "const",
            "constructor",
            "continue",
            "eager",
            "event",
            "external",
            "fixed",
            "functor",
            "include",
            "method",
            "mixin",
            "process",
            "property",
            "protected",
            "public",
            "pure",
            "readonly",
            "return",
            "sealed",
            "switch",
            "virtual",
            "void",
            "volatile",
            "yield",
            "where"
        ],
        "style-ref": "keyword"
    },
    {
        "include": {"context": [
            {"ref": "keywords"},
            {"ref": "keysymbol"},
            {"ref": "boolean-constant"},
            {"ref": "arraylit"},
            {"ref": "character-constant"},
            {"ref": "string"},
            {"ref": "variant"},
            {"ref": "modpath"},
            {"ref": "poly-variant"},
            {"ref": "label"},
            {"ref": "binary-number"},
            {"ref": "octal-number"},
            {"ref": "hex-number"},
            {"ref": "line-comment"},
            {"ref": "multiline-comment"},
            {"ref": "type-var"},
            {"ref": "if-false-comment"},
            {"ref": "preprocessor"},
            {"ref": "if0-comment"},
            {"ref": "decimal"}
        ]},
        "id": "fsharp",
        "class": "no-spell-check"
    }
]}