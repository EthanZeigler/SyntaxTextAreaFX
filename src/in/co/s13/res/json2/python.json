{"python.json": [
    {
        "match": {
            "extended": true,
            "content": "%                       # leading % sign\n        \\(\\%{identifier}\\)?     # mapping key\n        [#0\\-\\ \\+]*             # conversion flags\n        (\\-?\\%{number}|\\*)?     # minimum field width\n        (\\.(\\-?\\%{number}|\\*))? # precision\n        (hlL)?                  # lentgh modifier\n        [diouxXeEfFgGcrs%]      # conversion type"
        },
        "id": "format",
        "style-ref": "format",
        "extend-parent": false
    },
    {
        "match": {
            "extended": true,
            "content": "\\\\(                 # leading backslash\n        [\\\\'\"abfnrtv]     | # single escaped char\n        N\\{[A-Z\\ ]+\\}     | # named unicode character\n        u[0-9A-Fa-f]{4}   | # xxxx - character with 16-bit hex value xxxx\n        U[0-9A-Fa-f]{8}   | # xxxxxxxx - character with 32-bit hex value xxxxxxxx\n        x[0-9A-Fa-f]{1,2} | # \\xhh - character with hex value hh\n        [0-7]{1,3}          # \\ooo - character with octal value ooo\n        )"
        },
        "id": "escaped-char",
        "style-ref": "escaped-char",
        "extend-parent": true
    },
    {
        "include": {"context": [
            {"ref": "format"},
            {"ref": "escaped-char"}
        ]},
        "class-disabled": "no-spell-check",
        "start": "\\%{string-prefix}\"\"\"",
        "end": "\"\"\"",
        "id": "multiline-double-quoted-string",
        "class": "string",
        "style-ref": "multiline-string"
    },
    {
        "include": {"context": [
            {"ref": "format"},
            {"ref": "escaped-char"}
        ]},
        "class-disabled": "no-spell-check",
        "start": "\\%{string-prefix}'''",
        "end": "'''",
        "id": "multiline-single-quoted-string",
        "class": "string",
        "style-ref": "multiline-string"
    },
    {
        "include": {"context": [
            {"ref": "format"},
            {"ref": "escaped-char"},
            {"ref": "def:line-continue"}
        ]},
        "class-disabled": "no-spell-check",
        "start": "\\%{string-prefix}\"",
        "end": "\"",
        "id": "double-quoted-string",
        "class": "string",
        "style-ref": "string",
        "end-at-line-end": true
    },
    {
        "include": {"context": [
            {"ref": "format"},
            {"ref": "escaped-char"},
            {"ref": "def:line-continue"}
        ]},
        "class-disabled": "no-spell-check",
        "start": "\\%{string-prefix}'",
        "end": "'",
        "id": "single-quoted-string",
        "class": "string",
        "style-ref": "string",
        "end-at-line-end": true
    },
    {
        "include": {"context": {"ref": "format"}},
        "class-disabled": "no-spell-check",
        "start": "\\%{raw-string-prefix}\"\"\"",
        "end": "\"\"\"",
        "id": "multiline-double-quoted-raw-string",
        "class": "string",
        "style-ref": "multiline-string"
    },
    {
        "include": {"context": {"ref": "format"}},
        "class-disabled": "no-spell-check",
        "start": "\\%{raw-string-prefix}'''",
        "end": "'''",
        "id": "multiline-single-quoted-raw-string",
        "class": "string",
        "style-ref": "multiline-string"
    },
    {
        "include": {"context": [
            {"ref": "format"},
            {"ref": "def:line-continue"}
        ]},
        "class-disabled": "no-spell-check",
        "start": "\\%{raw-string-prefix}\"",
        "end": "\"",
        "id": "double-quoted-raw-string",
        "class": "string",
        "style-ref": "string",
        "end-at-line-end": true
    },
    {
        "include": {"context": [
            {"ref": "format"},
            {"ref": "def:line-continue"}
        ]},
        "class-disabled": "no-spell-check",
        "start": "\\%{raw-string-prefix}'",
        "end": "'",
        "id": "single-quoted-raw-string",
        "class": "string",
        "style-ref": "string",
        "end-at-line-end": true
    },
    {
        "include": {"context": {"ref": "python"}},
        "start": "`",
        "end": "`",
        "id": "string-conversion",
        "style-ref": "string-conversion",
        "end-at-line-end": true
    },
    {
        "prefix": "(?<![\\w\\.])",
        "id": "special-variables",
        "keyword": [
            "self",
            "__name__",
            "__debug__"
        ],
        "style-ref": "special-variable"
    },
    {
        "prefix": "(?<![\\w\\.])",
        "id": "boolean",
        "keyword": [
            false,
            true
        ],
        "style-ref": "boolean"
    },
    {
        "match": "(?<![\\w\\.])(\\%{float}|\\d+)[jJ]\\b",
        "id": "complex",
        "style-ref": "complex"
    },
    {
        "match": "(?<![\\w\\.])\\%{float}(?![\\w\\.])",
        "id": "float",
        "style-ref": "floating-point"
    },
    {
        "match": "(?<![\\w\\.])([1-9][0-9]*|0)[lL]?(?![\\w\\.])",
        "id": "decimal",
        "style-ref": "decimal"
    },
    {
        "match": "(?<![\\w\\.])0[0-7]+[lL]?(?![\\w\\.])",
        "id": "octal",
        "style-ref": "base-n-integer"
    },
    {
        "match": "(?<![\\w\\.])0[xX][0-9A-Fa-f]+[lL]?(?![\\w\\.])",
        "id": "hex",
        "style-ref": "base-n-integer"
    },
    {
        "include": {"context": [
            {
                "sub-pattern": 1,
                "style-ref": "module-handler"
            },
            {
                "sub-pattern": 2,
                "style-ref": "class-name"
            }
        ]},
        "match": {
            "extended": true,
            "content": "(from)\n        \\s+\n        (\\%{relative-path})"
        },
        "id": "module-handler-from"
    },
    {
        "id": "module-handler",
        "keyword": [
            "import",
            "from",
            "as"
        ],
        "style-ref": "module-handler"
    },
    {
        "include": {"context": [
            {
                "sub-pattern": 1,
                "style-ref": "keyword"
            },
            {
                "sub-pattern": 2,
                "style-ref": "function-name"
            }
        ]},
        "match": {
            "extended": true,
            "content": "(def)\n        \\s+\n        (\\%{identifier})"
        },
        "id": "function-definition"
    },
    {
        "include": {"context": [
            {
                "sub-pattern": 1,
                "style-ref": "keyword"
            },
            {
                "sub-pattern": 2,
                "style-ref": "class-name"
            }
        ]},
        "match": {
            "extended": true,
            "content": "(class)\n        \\s+\n        (\\%{identifier})"
        },
        "id": "class-definition"
    },
    {
        "match": "@\\%{identifier-path}",
        "id": "decorator",
        "style-ref": "decorator"
    },
    {
        "id": "keywords",
        "keyword": [
            "and",
            "assert",
            "break",
            "class",
            "continue",
            "def",
            "del",
            "elif",
            "else",
            "except",
            "finally",
            "for",
            "global",
            "if",
            "in",
            "is",
            "lambda",
            "not",
            "or",
            "pass",
            "raise",
            "return",
            "try",
            "while",
            "with",
            "yield"
        ],
        "style-ref": "keyword"
    },
    {
        "id": "2x-only-keywords",
        "keyword": [
            "exec",
            "print"
        ],
        "style-ref": "keyword"
    },
    {
        "prefix": "(?<![\\w\\.])",
        "id": "builtin-constants",
        "keyword": [
            "Ellipsis",
            "None",
            "NotImplemented"
        ],
        "style-ref": "builtin-constant"
    },
    {
        "prefix": "(?<![\\w\\.])",
        "id": "builtin-objects",
        "keyword": [
            "ArithmeticError",
            "AssertionError",
            "AttributeError",
            "EnvironmentError",
            "EOFError",
            "Exception",
            "FloatingPointError",
            "ImportError",
            "IndentationError",
            "IndexError",
            "IOError",
            "KeyboardInterrupt",
            "KeyError",
            "LookupError",
            "MemoryError",
            "NameError",
            "NotImplementedError",
            "OSError",
            "OverflowError",
            "ReferenceError",
            "RuntimeError",
            "StandardError",
            "StopIteration",
            "SyntaxError",
            "SystemError",
            "SystemExit",
            "TabError",
            "TypeError",
            "UnboundLocalError",
            "UnicodeDecodeError",
            "UnicodeEncodeError",
            "UnicodeError",
            "UnicodeTranslateError",
            "ValueError",
            "WindowsError",
            "ZeroDivisionError",
            "Warning",
            "UserWarning",
            "DeprecationWarning",
            "PendingDeprecationWarning",
            "SyntaxWarning",
            "OverflowWarning",
            "RuntimeWarning",
            "FutureWarning"
        ],
        "style-ref": "builtin-object"
    },
    {
        "prefix": "(?<![\\w\\.])",
        "id": "builtin-functions",
        "keyword": [
            "__import__",
            "abs",
            "all",
            "any",
            "bin",
            "bool",
            "callable",
            "chr",
            "classmethod",
            "compile",
            "complex",
            "delattr",
            "dict",
            "dir",
            "divmod",
            "enumerate",
            "eval",
            "filter",
            "float",
            "format",
            "frozenset",
            "getattr",
            "globals",
            "hasattr",
            "hash",
            "hex",
            "id",
            "input",
            "int",
            "isinstance",
            "issubclass",
            "iter",
            "len",
            "list",
            "locals",
            "map",
            "max",
            "min",
            "object",
            "oct",
            "open",
            "ord",
            "pow",
            "property",
            "range",
            "repr",
            "reversed",
            "round",
            "setattr",
            "set",
            "slice",
            "sorted",
            "staticmethod",
            "str",
            "sum",
            "super",
            "tuple",
            "type",
            "vars",
            "zip"
        ],
        "style-ref": "builtin-function"
    },
    {
        "prefix": "(?<![\\w\\.])",
        "id": "2x-only-builtin-functions",
        "keyword": [
            "apply",
            "basestring",
            "buffer",
            "cmp",
            "coerce",
            "execfile",
            "file",
            "intern",
            "long",
            "raw_input",
            "reduce",
            "reload",
            "unichr",
            "unicode",
            "xrange"
        ],
        "style-ref": "builtin-function"
    },
    {
        "include": {"context": [
            {"ref": "def:shebang"},
            {"ref": "def:shell-like-comment"},
            {"ref": "multiline-double-quoted-string"},
            {"ref": "multiline-single-quoted-string"},
            {"ref": "double-quoted-string"},
            {"ref": "single-quoted-string"},
            {"ref": "multiline-double-quoted-raw-string"},
            {"ref": "multiline-single-quoted-raw-string"},
            {"ref": "double-quoted-raw-string"},
            {"ref": "single-quoted-raw-string"},
            {"ref": "string-conversion"},
            {"ref": "special-variables"},
            {"ref": "boolean"},
            {"ref": "complex"},
            {"ref": "float"},
            {"ref": "decimal"},
            {"ref": "octal"},
            {"ref": "hex"},
            {"ref": "module-handler-from"},
            {"ref": "module-handler"},
            {"ref": "function-definition"},
            {"ref": "class-definition"},
            {"ref": "decorator"},
            {"ref": "keywords"},
            {"ref": "2x-only-keywords"},
            {"ref": "builtin-constants"},
            {"ref": "builtin-objects"},
            {"ref": "builtin-functions"},
            {"ref": "2x-only-builtin-functions"}
        ]},
        "id": "python",
        "class": "no-spell-check"
    }
]}