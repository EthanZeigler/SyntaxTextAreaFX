{"fortran.json": [
    {
        "include": {"context": [
            {
                "include": {"context": [
                    {"ref": "if-in-if0"},
                    {"ref": "def:in-comment"}
                ]},
                "start": "\\%{preproc-start}if(n?def)?\\b",
                "end": "\\%{preproc-start}endif\\b",
                "id": "if-in-if0"
            },
            {"ref": "def:in-comment"}
        ]},
        "start": "\\%{preproc-start}if\\b\\s*0\\b",
        "end": "\\%{preproc-start}(endif|else|elif)\\b",
        "id": "if0-comment",
        "style-ref": "comment"
    },
    {
        "include": {"context": {
            "id": "included-file",
            "class": "path",
            "sub-pattern": 2,
            "style-ref": "included-file"
        }},
        "match": {
            "extended": true,
            "content": "\\%{preproc-start}\n        (include|import)\\s*\n        (\".*?\"|<.*>)"
        },
        "id": "include",
        "style-ref": "preprocessor"
    },
    {
        "start": {
            "extended": true,
            "content": "\\%{preproc-start}\n        (define|undef|error|pragma|ident|if(n?def)?|else|elif|endif|line|warning)\n        \\b"
        },
        "id": "preprocessor",
        "style-ref": "preprocessor",
        "end-at-line-end": true
    },
    {
        "start": {
            "extended": true,
            "content": "((^[Cc])|^\\s*!)\\$"
        },
        "id": "openmp-directives",
        "style-ref": "openmp-directives",
        "end-at-line-end": true
    },
    {
        "include": {"context": [
            {
                "match": "\\%{escaped-character}",
                "id": "escaped-character",
                "style-ref": "escaped-character"
            },
            {"ref": "def:line-continue"}
        ]},
        "class-disabled": "no-spell-check",
        "start": "L?\"",
        "end": "\"",
        "id": "string",
        "class": "string",
        "style-ref": "string",
        "end-at-line-end": true
    },
    {
        "include": {"context": [
            {"ref": "def:escape"},
            {"ref": "def:in-line-comment"}
        ]},
        "class-disabled": "no-spell-check",
        "start": "(![^$])|(^[Cc](\\s|[^$OoAaYyHh]))|(^[Cc]$)",
        "id": "line-comment",
        "class": "comment",
        "style-ref": "comment",
        "end-at-line-end": true
    },
    {
        "prefix": "\\.",
        "id": "operators",
        "suffix": "\\.",
        "keyword": [
            true,
            false,
            "not",
            "and",
            "or",
            "xor",
            "eqv",
            "neqv",
            "eq",
            "ne",
            "gt",
            "ge",
            "lt",
            "le"
        ],
        "style-ref": "keyword"
    },
    {
        "id": "keywords",
        "keyword": [
            "abstract interface",
            "allocate",
            "assign",
            "assignment",
            "block data",
            "call",
            "case",
            "class",
            "common",
            "contains",
            "continue",
            "cycle",
            "data",
            "deallocate",
            "default",
            "do",
            "do concurrent",
            "elemental",
            "elseif",
            "else",
            "elsewhere",
            "enddo",
            "endif",
            "endselect",
            "end",
            "entry",
            "equivalence",
            "exit",
            "external",
            "forall",
            "function",
            "go to",
            "goto",
            "if",
            "implicit none",
            "in",
            "[^#]include",
            "inout",
            "interface",
            "intrinsic",
            "kind",
            "len",
            "module",
            "namelist",
            "nullify",
            "only",
            "operator",
            "out",
            "pause",
            "private",
            "program",
            "public",
            "pure",
            "recursive",
            "result",
            "return",
            "save",
            "select",
            "stop",
            "subroutine",
            "then",
            "type",
            "use",
            "where",
            "while"
        ],
        "style-ref": "keyword"
    },
    {
        "id": "read-write",
        "keyword": [
            "backspace",
            "close",
            "endfile",
            "format",
            "inquire",
            "open",
            "print",
            "read",
            "rewind",
            "write"
        ],
        "style-ref": "keyword"
    },
    {
        "id": "input-output",
        "keyword": [
            "access",
            "action",
            "advance",
            "blank",
            "delim",
            "direct",
            "end",
            "eor",
            "err",
            "exist",
            "file",
            "fmt",
            "form",
            "formatted",
            "iolength",
            "iostat",
            "name",
            "named",
            "nextrec",
            "nml",
            "number",
            "opened",
            "pad",
            "position",
            "readwrite",
            "rec",
            "recl",
            "sequential",
            "status",
            "unformatted",
            "unit",
            "write"
        ],
        "style-ref": "keyword"
    },
    {
        "id": "intrinsics",
        "keyword": [
            "abs",
            "achar",
            "acos",
            "adjustl",
            "adjustr",
            "aimag",
            "aint",
            "algama",
            "allocated",
            "all",
            "alog10",
            "alog",
            "amax0",
            "amax1",
            "amin0",
            "amin1",
            "amod",
            "anint",
            "any",
            "asin",
            "associated",
            "atan2",
            "atan",
            "bit_size",
            "btest",
            "c_associated",
            "c_loc",
            "c_funloc",
            "c_f_pointer",
            "c_f_procpointer",
            "cabs",
            "ccos",
            "cdabs",
            "cdcos",
            "cdexp",
            "cdlog",
            "cdsin",
            "cdsqrt",
            "ceiling",
            "cexp",
            "char",
            "clog",
            "cmplx",
            "command_argument_count",
            "conjg",
            "cosh",
            "cos",
            "count",
            "cpu_time",
            "cqabs",
            "cqcos",
            "cqexp",
            "cqlog",
            "cqsin",
            "cqsqrt",
            "cshift",
            "csin",
            "csqrt",
            "dabs",
            "dacos",
            "dasin",
            "datan2",
            "datan",
            "date_and_time",
            "dble",
            "dcmplx",
            "dconjg",
            "dcosh",
            "dcos",
            "ddim",
            "derf",
            "derfc",
            "dexp",
            "dfloat",
            "dgamma",
            "digits",
            "dim",
            "dimag",
            "dint",
            "dlgama",
            "dlog10",
            "dlog",
            "dmax1",
            "dmin1",
            "dmod",
            "dnint",
            "dot_product",
            "dprod",
            "dsign",
            "dsinh",
            "dsin",
            "dsqrt",
            "dtanh",
            "dtan",
            "eoshift",
            "epsilon",
            "erfc",
            "erf",
            "exp",
            "exponent",
            "float",
            "floor",
            "fraction",
            "gamma",
            "getarg",
            "get_command",
            "get_command_argument",
            "get_environment_variable",
            "huge",
            "iabs",
            "iachar",
            "iand",
            "iargc",
            "ibclr",
            "ibits",
            "ibset",
            "ichar",
            "idim",
            "idint",
            "idnint",
            "ieor",
            "ifix",
            "index",
            "int",
            "ior",
            "iqint",
            "is_iostat_end",
            "is_iostat_eor",
            "ishftc",
            "ishft",
            "isign",
            "kind",
            "lbound",
            "len_trim",
            "len",
            "lge",
            "lgt",
            "lle",
            "llt",
            "loc",
            "log10",
            "log",
            "logical",
            "matmul",
            "max0",
            "max1",
            "maxexponent",
            "maxloc",
            "maxval",
            "max",
            "merge",
            "min0",
            "min1",
            "minexponent",
            "minloc",
            "minval",
            "min",
            "mod",
            "modulo",
            "move_alloc",
            "mvbits",
            "nearest",
            "new_line",
            "nint",
            "norm2",
            "not",
            null,
            "or",
            "pack",
            "precision",
            "present",
            "product",
            "qabs",
            "qacos",
            "qasin",
            "qatan2",
            "qatan",
            "qcmplx",
            "qconjg",
            "qcosh",
            "qcos",
            "qdim",
            "qerf",
            "qerfc",
            "qexp",
            "qgamma",
            "qimag",
            "qlgama",
            "qlog10",
            "qlog",
            "qmax1",
            "qmin1",
            "qmod",
            "qnint",
            "qsign",
            "qsinh",
            "qsin",
            "qsqrt",
            "qtanh",
            "qtan",
            "radix",
            "random_number",
            "random_seed",
            "range",
            "real",
            "repeat",
            "reshape",
            "rrspacing",
            "scale",
            "scan",
            "selected_char_kind",
            "selected_int_kind",
            "selected_real_kind",
            "set_exponent",
            "shape",
            "sign",
            "sinh",
            "sin",
            "size",
            "sngl",
            "spacing",
            "spread",
            "sqrt",
            "sum",
            "system_clock",
            "tanh",
            "tan",
            "tiny",
            "transfer",
            "transpose",
            "trim",
            "ubound",
            "unpack",
            "verify",
            "zabs",
            "zcos",
            "zexp",
            "zlog",
            "zsin",
            "zsqrt"
        ],
        "style-ref": "intrinsic"
    },
    {
        "id": "types",
        "keyword": [
            "byte",
            "character",
            "complex",
            "double complex",
            "double precision",
            "integer",
            "logical",
            "procedure",
            "real"
        ],
        "style-ref": "type"
    },
    {
        "id": "type-attributes",
        "keyword": [
            "allocatable",
            "dimension",
            "external",
            "intent",
            "intrinsic",
            "optional",
            "parameter",
            "pointer",
            "private",
            "public",
            "save",
            "target"
        ],
        "style-ref": "type"
    },
    {
        "include": {"context": {"ref": "type-attributes"}},
        "start": ",\\s*\\%[",
        "end": "\\%[",
        "id": "attributes"
    },
    {
        "match": {
            "extended": true,
            "content": "(?<![\\w\\.])\n        [+-]?\n        ((\\.[0-9]+ | [0-9]+\\.[0-9]*) ([ed][+-]?[0-9]*)? |\n         ([0-9]+[ed][+-]?[0-9]*))\n         ([_]([0-9]+|[a-z][\\w_]*))?\n        (?![\\w\\.])"
        },
        "id": "floating-point-number",
        "style-ref": "floating-point"
    },
    {
        "match": {
            "extended": true,
            "content": "(?<![\\w\\.])\n        [+-]? ([1-9][0-9]*|0)\n        ([_]([0-9]+|[a-z][\\w_]*))?\n        (?![\\w\\.])"
        },
        "id": "decimal",
        "style-ref": "decimal"
    },
    {
        "match": {
            "extended": true,
            "content": "\\bb'[01]+'|\\bb\"[01]+\"|\n        \\bo'[0-7]+'|\\bo\"[0-7]+\"|\n        \\bz'[0-9a-f]+'|\\bz\"[0-9a-f]+\""
        },
        "id": "boz-literal",
        "style-ref": "boz-literal"
    },
    {
        "include": {"context": [
            {"ref": "floating-point-number"},
            {"ref": "decimal"},
            {"ref": "boz-literal"},
            {"ref": "def:string"},
            {"ref": "def:single-quoted-string"},
            {"ref": "line-comment"},
            {"ref": "types"},
            {"ref": "attributes"},
            {"ref": "operators"},
            {"ref": "keywords"},
            {"ref": "read-write"},
            {"ref": "input-output"},
            {"ref": "intrinsics"},
            {"ref": "if0-comment"},
            {"ref": "include"},
            {"ref": "preprocessor"},
            {"ref": "openmp-directives"}
        ]},
        "id": "fortran",
        "class": "no-spell-check"
    }
]}