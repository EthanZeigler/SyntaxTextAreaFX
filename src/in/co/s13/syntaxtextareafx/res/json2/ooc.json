{"ooc.json": [
    {
        "include": {"context": {
            "match": "\\%{escaped-character}",
            "id": "escaped-character",
            "style-ref": "escaped-character"
        }},
        "start": "\"",
        "end": "\"",
        "id": "string",
        "style-ref": "string",
        "end-at-line-end": false
    },
    {
        "include": {"context": {"ref": "def:in-line-comment"}},
        "start": "//",
        "id": "line-comment",
        "style-ref": "comment",
        "end-at-line-end": true
    },
    {
        "include": {"context": {"ref": "def:in-comment"}},
        "start": "/\\*",
        "end": "\\*/",
        "id": "block-comment",
        "style-ref": "comment"
    },
    {
        "match": "\\*/(?!\\*)",
        "id": "close-comment-outside-comment",
        "style-ref": "error"
    },
    {
        "id": "externals",
        "keyword": [
            "import",
            "include",
            "use"
        ],
        "style-ref": "external"
    },
    {
        "id": "declarations",
        "keyword": [
            "class",
            "cover",
            "func",
            "implement",
            "interface",
            "operator"
        ],
        "style-ref": "declaration"
    },
    {
        "id": "primitive-types",
        "keyword": [
            "Int",
            "Int8",
            "Int16",
            "Int32",
            "Int64",
            "Int80",
            "Int128",
            "UInt",
            "UInt8",
            "UInt16",
            "UInt32",
            "UInt64",
            "UInt80",
            "UInt128",
            "Octet",
            "Short",
            "UShort",
            "Long",
            "ULong",
            "LLong",
            "ULLong",
            "Float",
            "Double",
            "LDouble",
            "Float32",
            "Float64",
            "Float128",
            "Char",
            "UChar",
            "SChar",
            "WChar",
            "String",
            "Void",
            "Pointer",
            "Bool",
            "SizeT",
            "This"
        ],
        "style-ref": "type"
    },
    {
        "id": "storage-class",
        "keyword": [
            "abstract",
            "static",
            "final",
            "extern",
            "const",
            "proto"
        ],
        "style-ref": "storage-class"
    },
    {
        "id": "scope-declarations",
        "keyword": [
            "private",
            "protected",
            "public",
            "internal"
        ],
        "style-ref": "scope-declaration"
    },
    {
        "id": "flow",
        "keyword": [
            "as",
            "break",
            "continue",
            "else",
            "fallthrough",
            "finally",
            "for",
            "if",
            "match",
            "return",
            "while"
        ],
        "style-ref": "keyword"
    },
    {
        "id": "memory",
        "keyword": [
            "new",
            "this"
        ],
        "style-ref": "keyword"
    },
    {
        "id": "future-reserved-words",
        "keyword": [
            "catch",
            "const",
            "goto",
            "finally",
            "throw",
            "try",
            "with",
            "scope"
        ],
        "style-ref": "reserved"
    },
    {
        "id": "null-value",
        "keyword": null,
        "style-ref": "null-value"
    },
    {
        "id": "boolean",
        "keyword": [
            false,
            true
        ],
        "style-ref": "boolean"
    },
    {
        "match": {
            "extended": true,
            "content": "(?<![\\w\\.])\n            ((\\.[0-9]+ | [0-9]+\\.[0-9]*) ([Ee][+-]?[0-9]*)? |\n             ([0-9]+[Ee][+-]?[0-9]*))\n            [fFlL]?\n            (?![\\w\\.])"
        },
        "id": "float",
        "style-ref": "floating-point"
    },
    {
        "match": {
            "extended": true,
            "content": "(?<![\\w\\.])\n            0[xX][a-fA-F0-9]+[uUlL]*\n            (?![\\w\\.])"
        },
        "id": "hexadecimal",
        "style-ref": "hexadecimal"
    },
    {
        "match": {
            "extended": true,
            "content": "(?<![\\w\\.])\n            0[cC][0-7]+[uUlL]*\n            (?![\\w\\.])"
        },
        "id": "octal",
        "style-ref": "octal"
    },
    {
        "match": {
            "extended": true,
            "content": "(?<![\\w\\.])\n            [0-9]+[uUlL]*\n            (?![\\w\\.])"
        },
        "id": "decimal",
        "style-ref": "decimal"
    },
    {
        "include": {"context": [
            {"ref": "string"},
            {"ref": "line-comment"},
            {"ref": "block-comment"},
            {"ref": "close-comment-outside-comment"},
            {"ref": "externals"},
            {"ref": "declarations"},
            {"ref": "primitive-types"},
            {"ref": "storage-class"},
            {"ref": "scope-declarations"},
            {"ref": "flow"},
            {"ref": "memory"},
            {"ref": "future-reserved-words"},
            {"ref": "null-value"},
            {"ref": "boolean"},
            {"ref": "decimal"},
            {"ref": "hexadecimal"},
            {"ref": "octal"},
            {"ref": "float"}
        ]},
        "id": "ooc"
    }
]}