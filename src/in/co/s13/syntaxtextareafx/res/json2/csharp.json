{"csharp.json": [
    {
        "include": {"context": {"ref": "def:in-line-comment"}},
        "class-disabled": "no-spell-check",
        "start": "//",
        "id": "line-comment",
        "class": "comment",
        "style-ref": "comment",
        "end-at-line-end": true
    },
    {
        "include": {"context": {"ref": "def:in-comment"}},
        "class-disabled": "no-spell-check",
        "start": "/\\*",
        "end": "\\*/",
        "id": "multiline-comment",
        "class": "comment",
        "style-ref": "comment"
    },
    {
        "match": "\\*/(?!\\*)",
        "id": "close-comment-outside-comment",
        "style-ref": "error"
    },
    {
        "include": {"context": [
            {
                "include": {"context": [
                    {"ref": "if-in-if-false"},
                    {"ref": "def:in-comment"}
                ]},
                "start": "\\%{preproc-start}if(n?def)?\\b",
                "end": "\\%{preproc-start}endif\\b",
                "id": "if-in-if-false"
            },
            {"ref": "def:in-comment"}
        ]},
        "start": "\\%{preproc-start}if\\s*false\\b",
        "end": "\\%{preproc-start}(endif|else|elif)\\b",
        "id": "if-false-comment",
        "style-ref": "comment"
    },
    {
        "include": {"context": [
            {"ref": "line-comment"},
            {"ref": "multiline-comment"}
        ]},
        "start": {
            "extended": true,
            "content": "\\%{preproc-start}\n        (define|undef|if(n?def)?|else|elif|endif|line|error|warning|region|endregion)\n        \\b"
        },
        "id": "preprocessor",
        "style-ref": "preprocessor",
        "end-at-line-end": true
    },
    {
        "class-disabled": "no-spell-check",
        "start": "@\"",
        "end": "\"",
        "id": "multiline-string",
        "class": "string",
        "style-ref": "string"
    },
    {
        "id": "keywords",
        "keyword": [
            "async",
            "await",
            "class",
            "delegate",
            "enum",
            "event",
            "interface",
            "namespace",
            "struct",
            "using",
            "abstract",
            "const",
            "explicit",
            "extern",
            "fixed",
            "implicit",
            "internal",
            "lock",
            "out",
            "override",
            "params",
            "partial",
            "private",
            "protected",
            "public",
            "ref",
            "sealed",
            "static",
            "readonly",
            "unsafe",
            "virtual",
            "volatile",
            "add",
            "as",
            "assembly",
            "base",
            "break",
            "case",
            "catch",
            "checked",
            "continue",
            "default",
            "do",
            "else",
            "finally",
            "for",
            "foreach",
            "get",
            "goto",
            "if",
            "in",
            "is",
            "nameof",
            "new",
            "remove",
            "return",
            "set",
            "sizeof",
            "stackalloc",
            "super",
            "switch",
            "this",
            "throw",
            "try",
            "typeof",
            "unchecked",
            "value",
            "var",
            "void",
            "while",
            "yield"
        ],
        "style-ref": "keyword"
    },
    {
        "id": "primitives",
        "keyword": [
            "bool",
            "byte",
            "char",
            "decimal",
            "double",
            "dynamic",
            "float",
            "int",
            "long",
            "object",
            "operator",
            "sbyte",
            "short",
            "string",
            "uint",
            "ulong",
            "ushort"
        ],
        "style-ref": "type"
    },
    {
        "id": "null-value",
        "keyword": null,
        "style-ref": "null-value"
    },
    {
        "id": "boolean",
        "keyword": [
            false,
            true
        ],
        "style-ref": "boolean"
    },
    {
        "match": {
            "extended": true,
            "content": "(?<![\\w\\.])\n        [0-9]+[uUlL]*\n        (?![\\w\\.])"
        },
        "id": "decimal",
        "style-ref": "decimal"
    },
    {
        "match": {
            "extended": true,
            "content": "(?<![\\w\\.])\n        0[xX][a-fA-F0-9]+[uUlL]*\n        (?![\\w\\.])"
        },
        "id": "hexadecimal",
        "style-ref": "hexadecimal"
    },
    {
        "match": {
            "extended": true,
            "content": "(?<![\\w\\.])\n        ((\\.[0-9]+|[0-9]+\\.[0-9]*)([Ee][+-]?[0-9]*)?[FfDdMm]?|\n         ([0-9]+[Ee][+-]?[0-9]*)[FfDdMm]? |\n         ([0-9]+)[FfDdMm])\n        (?![\\w\\.])"
        },
        "id": "real",
        "style-ref": "real"
    },
    {
        "include": {"context": [
            {
                "match": "{[0-9][0-9:\\#\\%,./cdefgnrxtsuDTFGMY]*}",
                "id": "csharp-format",
                "style-ref": "format"
            },
            {
                "match": "\\%{escaped-character}",
                "id": "escaped-character",
                "style-ref": "escaped-character"
            },
            {"ref": "def:line-continue"}
        ]},
        "class-disabled": "no-spell-check",
        "start": "\"",
        "end": "\"",
        "id": "string",
        "class": "string",
        "style-ref": "string",
        "end-at-line-end": true
    },
    {
        "match": "'(\\%{escaped-character}|.)'",
        "id": "char",
        "style-ref": "char"
    },
    {
        "include": {"context": [
            {"ref": "multiline-string"},
            {"ref": "string"},
            {"ref": "char"},
            {"ref": "line-comment"},
            {"ref": "multiline-comment"},
            {"ref": "close-comment-outside-comment"},
            {"ref": "if-false-comment"},
            {"ref": "preprocessor"},
            {"ref": "keywords"},
            {"ref": "primitives"},
            {"ref": "null-value"},
            {"ref": "boolean"},
            {"ref": "decimal"},
            {"ref": "hexadecimal"},
            {"ref": "real"}
        ]},
        "id": "c-sharp",
        "class": "no-spell-check"
    }
]}