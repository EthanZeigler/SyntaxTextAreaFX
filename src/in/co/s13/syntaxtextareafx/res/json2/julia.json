{"julia.json": [
    {
        "include": {"context": {"ref": "def:escape"}},
        "class-disabled": "no-spell-check",
        "start": "\"",
        "end": "\"",
        "id": "string",
        "class": "string",
        "style-ref": "string"
    },
    {
        "match": {
            "extended": true,
            "content": "'(\n        ([^\\\\']|\\\\.)                 |\n        \\\\[0-7]{1,3}                 |\n        \\\\x[0-9a-fA-F]{1,2}          |\n        \\\\u[0-9a-fA-F]{1,3}          |\n        \\\\u[0-9a-cA-C][0-9a-fA-F]{3} |\n        \\\\u[dD][0-7][0-9a-fA-F]{2}   |\n        \\\\U[0-9a-fA-F]{1,5}          |\n        \\\\U10[0-9a-fA-F]{4}\n        )'"
        },
        "id": "character",
        "style-ref": "character"
    },
    {
        "match": {
            "extended": true,
            "content": "(?<!\\w) 0b[01]+                            | # binary\n        (?<!\\w) 0o[0-7]+                           | # octal\n        (?<!\\w) 0x[0-9a-fA-F]+                     | # hexadecimal\n        (?<!\\w) (\\d+(\\.\\d+)?|\\.\\d+)([eE][+-]?\\d+)?   # decimal"
        },
        "id": "number",
        "style-ref": "number"
    },
    {
        "id": "boolean",
        "keyword": "true|false",
        "style-ref": "boolean"
    },
    {
        "match": {
            "extended": true,
            "content": "(?<=\\d|\\b) pi       \\b |\n        (?<=\\d|\\b) e        \\b |\n        (?<=\\d|\\b) im       \\b |\n        (?<=\\d|\\b) Inf(32)? \\b |\n        (?<=\\d|\\b) NaN(32)? \\b"
        },
        "id": "math-constant",
        "style-ref": "math-constant"
    },
    {
        "id": "special-constant",
        "keyword": [
            "nothing",
            "ARGS",
            "LOAD_PATH",
            "CPU_CORES",
            "OS_NAME",
            "C_NULL",
            "WORD_SIZE",
            "VERSION",
            "ENDIAN_BOM",
            "ENV",
            "STDERR",
            "STDIN",
            "STDOUT",
            "T",
            "ANY"
        ],
        "style-ref": "special-constant"
    },
    {
        "include": {"context": [
            {"ref": "octave:operator"},
            {
                "match": {
                    "extended": true,
                    "content": "[$%]=?           |\n            \\.[<>%']   |\n            \\.[<>=!]="
                },
                "id": "julia-operators",
                "style-ref": "operator"
            }
        ]},
        "id": "operator"
    },
    {
        "match": {
            "extended": true,
            "content": "\\(|\\)        |\n        \\[|\\]        |\n        \\{|\\}        |\n        \\.|,|;|\\?    |\n        \\.\\.\\."
        },
        "id": "punctuation",
        "style-ref": "operator"
    },
    {
        "id": "keyword",
        "keyword": [
            "begin",
            "do",
            "for",
            "in",
            "function",
            "if",
            "immutable",
            "let",
            "quote",
            "try",
            "type",
            "while",
            "catch",
            "finally",
            "else",
            "elseif",
            "end",
            "abstract",
            "bitstype",
            "break",
            "ccall",
            "const",
            "continue",
            "export",
            "global",
            "import",
            "importall",
            "local",
            "macro",
            "module",
            "baremodule",
            "return",
            "typealias",
            "using"
        ],
        "style-ref": "keyword"
    },
    {
        "start": "`",
        "end": "`",
        "id": "external-command",
        "style-ref": "external-command"
    },
    {
        "id": "builtin-function",
        "keyword": [
            "is",
            "typeof",
            "subtype",
            "isa",
            "typeassert",
            "apply",
            "kwcall",
            "throw",
            "tuple",
            "Union",
            "method_exists",
            "applicable",
            "invoke",
            "eval",
            "isdefined",
            "yieldto"
        ],
        "style-ref": "builtin-function"
    },
    {
        "id": "module",
        "keyword": [
            "Base",
            "Core",
            "Main",
            "PCRE",
            "FFTW",
            "Collections",
            "DSP",
            "LinAlg",
            "LibRandom",
            "Random",
            "Math",
            "MPFR",
            "GMP",
            "Sort",
            "Test",
            "Pkg",
            "Operators",
            "Errno",
            "Meta",
            "Graphics"
        ],
        "style-ref": "module"
    },
    {
        "id": "type",
        "keyword": [
            "Any|None|Nothing|Void",
            "Type(Constructor|Name|Var|_Array)?|(Union|Data|NonTuple)Type",
            "(Abstract|Strided|Bit)?(Array|Matrix|Vector)",
            "Abstract(Cmd|RNG|SparseMatrix)",
            "(Abstract|Strided)?VecOrMat",
            "SparseMatrixCSC",
            "(D|Sub((Or)?D)?)Array",
            "Chars?",
            "(ASCII|Byte|Char|DirectIndex|Generic|Rep|Rev|Rope|Sub|UTF8)?String",
            "Bool",
            "Number",
            "Real",
            "Rational",
            "ImaginaryUnit",
            "Signed|Unsigned",
            "Int(eger|Set|8|16|32|64|128)?",
            "Uint(8|16|32|64|128)?",
            "Float(ingPoint|32|64)",
            "Complex(Pair|64|128)?",
            "Big(Int|Float)",
            "C(float|double|ptrdiff_t|u?(int|long(long)?|char|short)|s?size_t|wchar_t)",
            "(Argument|Bounds|Divide|Domain|EOF|Inexact|Key|Load|Memory|Method|Parse|(Stack)?Overflow|System|Type|UV|UndefRef)Error",
            "(Error|Interrupt|Disconnect)?Exception",
            "Algorithm",
            "Associative",
            "AsyncStream",
            "Box",
            "BunchKaufman",
            "CPUinfo",
            "CallStack",
            "Callback",
            "Cholesky",
            "CholeskyPivoted",
            "Cmd(Redirect)?",
            "(And|Or)Cmds",
            "Colon",
            "LU|(((Sym|LDLT|LU)?Tr|B)id|D)iagonal",
            "Dict",
            "EachLine",
            "Eigen",
            "EmptyCallStack",
            "Enumerate",
            "EnvHash",
            "Executable",
            "Expr(Node)?",
            "Factorization",
            "FDWatcher",
            "(Abstract)?File",
            "File(Monitor|Offset)",
            "Filter",
            "(Intrinsic)?Function",
            "Hermitian",
            "Hessenberg",
            "IO(Buffer|Stream)?",
            "InetAddr",
            "IpAddr|IPv[46]",
            "(Key|Value)Iterator",
            "LambdaStaticData",
            "LocalProcess",
            "Long(Expr|Symbol|Tuple)",
            "MersenneTwister",
            "Method(Table)?",
            "MmapArrayInfo",
            "Module",
            "NTuple",
            "NamedPipe",
            "(Getfield|Goto|Label|LineNumber|Quote)Node",
            "NotFound",
            "OS_FD",
            "ObjectIdDict",
            "PollingFileWatcher",
            "Process(Chain(OrNot)?|Group)?",
            "Ptr",
            "QR(Pivoted)?",
            "Range(s|1|Index|VecIntList)?",
            "RawOrBoxedHandle",
            "Redirectable",
            "Regex(Match(Iterator)?)?",
            "RemoteRef",
            "Rest",
            "Reverse",
            "(Generalized)?(SVD|Schur)",
            "Set",
            "Socket",
            "(Merge|Insertion|Tim|Quick)Sort",
            "SpawnNullStream",
            "Stat",
            "StateUpdate",
            "StaticVarInfo",
            "Symbol(Node)?",
            "TTY",
            "Task",
            "TcpSocket",
            "TmStruct",
            "Top(Node)?",
            "Triangular",
            "UV(Handle|PollingWatcher|Stream)",
            "UdpSocket",
            "Undef(RefTag)?",
            "VarTable",
            "Vararg",
            "VersionNumber",
            "Wait(For|Task)",
            "Weak(KeyDict|Ref)",
            "Woodbury",
            "(Timeout|Idle|Single)?AsyncWork",
            "Work(er|Item)",
            "Zip"
        ],
        "style-ref": "type"
    },
    {
        "include": {"context": [
            {"ref": "def:shebang"},
            {"ref": "def:shell-like-comment"},
            {"ref": "string"},
            {"ref": "character"},
            {"ref": "number"},
            {"ref": "boolean"},
            {"ref": "math-constant"},
            {"ref": "special-constant"},
            {"ref": "operator"},
            {"ref": "punctuation"},
            {"ref": "keyword"},
            {"ref": "external-command"},
            {"ref": "builtin-function"},
            {"ref": "module"},
            {"ref": "type"},
            {
                "ref": "octave:function-handle",
                "style-ref": "macro"
            }
        ]},
        "id": "julia",
        "class": "no-spell-check"
    }
]}