{"language": {
    "metadata": {"property": [
        {
            "name": "mimetypes",
            "content": "text/x-nemerle"
        },
        {
            "name": "globs",
            "content": "*.n"
        },
        {
            "name": "line-comment-start",
            "content": "//"
        },
        {
            "name": "block-comment-start",
            "content": "/*"
        },
        {
            "name": "block-comment-end",
            "content": "*/"
        }
    ]},
    "_name": "Nemerle",
    "_section": "Source",
    "styles": {"style": [
        {
            "_name": "Comment",
            "map-to": "def:comment",
            "id": "comment"
        },
        {
            "_name": "Error",
            "map-to": "def:error",
            "id": "error"
        },
        {
            "_name": "Preprocessor",
            "map-to": "def:preprocessor",
            "id": "preprocessor"
        },
        {
            "_name": "Character",
            "map-to": "def:character",
            "id": "character"
        },
        {
            "_name": "String",
            "map-to": "def:string",
            "id": "string"
        },
        {
            "_name": "Keyword",
            "map-to": "def:keyword",
            "id": "keyword"
        },
        {
            "_name": "Data Type",
            "map-to": "def:type",
            "id": "type"
        },
        {
            "_name": "Null Value",
            "map-to": "def:special-constant",
            "id": "null-value"
        },
        {
            "_name": "Boolean value",
            "map-to": "def:boolean",
            "id": "boolean"
        },
        {
            "_name": "Floating point number",
            "map-to": "def:floating-point",
            "id": "floating-point"
        },
        {
            "_name": "Decimal number",
            "map-to": "def:decimal",
            "id": "decimal"
        },
        {
            "_name": "Binary number",
            "map-to": "def:base-n-integer",
            "id": "binary"
        },
        {
            "_name": "Octal number",
            "map-to": "def:base-n-integer",
            "id": "octal"
        },
        {
            "_name": "Hexadecimal number",
            "map-to": "def:base-n-integer",
            "id": "hexadecimal"
        }
    ]},
    "id": "nemerle",
    "version": 2,
    "definitions": {
        "context": [
            {
                "include": {"context": {"ref": "def:in-line-comment"}},
                "class-disabled": "no-spell-check",
                "start": "//",
                "id": "line-comment",
                "class": "comment",
                "style-ref": "comment",
                "end-at-line-end": true
            },
            {
                "include": {"context": {"ref": "def:in-comment"}},
                "class-disabled": "no-spell-check",
                "start": "/\\*",
                "end": "\\*/",
                "id": "block-comment",
                "class": "comment",
                "style-ref": "comment"
            },
            {
                "match": "\\*/(?!\\*)",
                "id": "close-comment-outside-comment",
                "style-ref": "error"
            },
            {
                "include": {"context": [
                    {
                        "include": {"context": [
                            {"ref": "if-in-if-false"},
                            {"ref": "def:in-comment"}
                        ]},
                        "start": "\\%{preproc-start}if(n?def)?\\b",
                        "end": "\\%{preproc-start}endif\\b",
                        "id": "if-in-if-false"
                    },
                    {"ref": "def:in-comment"}
                ]},
                "start": "\\%{preproc-start}if\\s*false\\b",
                "end": "\\%{preproc-start}(endif|else|elif)\\b",
                "id": "if-false-comment",
                "style-ref": "comment"
            },
            {
                "include": {"context": [
                    {"ref": "line-comment"},
                    {"ref": "block-comment"}
                ]},
                "start": {
                    "extended": true,
                    "content": "\\%{preproc-start}\n        (define|undef|if(n?def)?|else|elif|endif|line|error|warning|region|endregion)\n        \\b"
                },
                "id": "preprocessor",
                "style-ref": "preprocessor",
                "end-at-line-end": true
            },
            {
                "match": "'(\\\\)?.'",
                "id": "character",
                "style-ref": "character"
            },
            {
                "include": {"context": [
                    {"ref": "def:escape"},
                    {"ref": "def:line-continue"}
                ]},
                "class-disabled": "no-spell-check",
                "start": "'",
                "end": "'",
                "id": "string",
                "class": "string",
                "style-ref": "string",
                "end-at-line-end": true
            },
            {
                "id": "keywords",
                "keyword": [
                    "_",
                    "abstract",
                    "and",
                    "array",
                    "as",
                    "base",
                    "catch",
                    "class",
                    "def",
                    "do",
                    "else",
                    "extends",
                    "extern",
                    "finally",
                    "foreach",
                    "for",
                    "fun",
                    "if",
                    "implements",
                    "in",
                    "interface",
                    "internal",
                    "lock",
                    "macro",
                    "match",
                    "module",
                    "mutable",
                    "namespace",
                    "new",
                    "out",
                    "override",
                    "params",
                    "private",
                    "protected",
                    "public",
                    "ref",
                    "repeat",
                    "sealed",
                    "static",
                    "struct",
                    "syntax",
                    "this",
                    "throw",
                    "try",
                    "type",
                    "typeof",
                    "unless",
                    "until",
                    "using",
                    "variant",
                    "virtual",
                    "when",
                    "where",
                    "while"
                ],
                "style-ref": "keyword"
            },
            {
                "id": "types",
                "keyword": [
                    "bool",
                    "byte",
                    "char",
                    "decimal",
                    "double",
                    "float",
                    "int",
                    "list",
                    "long",
                    "object",
                    "sbyte",
                    "short",
                    "string",
                    "uint",
                    "ulong",
                    "ushort",
                    "void"
                ],
                "style-ref": "type"
            },
            {
                "id": "null-value",
                "keyword": null,
                "style-ref": "null-value"
            },
            {
                "id": "boolean",
                "keyword": [
                    false,
                    true
                ],
                "style-ref": "boolean"
            },
            {
                "match": {
                    "extended": true,
                    "content": "(?<![\\w\\.])\n        [0-9]*\\.[0-9]+([eE][-+]?[0-9]+)?\n        (?![\\w\\.])"
                },
                "id": "float",
                "style-ref": "floating-point"
            },
            {
                "match": {
                    "extended": true,
                    "content": "(?<![\\w\\.])\n        [0-9]+[Uu]?([Ll]|[Ss]|[Bb])?\n        (?![\\w\\.])"
                },
                "id": "decimal",
                "style-ref": "decimal"
            },
            {
                "match": {
                    "extended": true,
                    "content": "(?<![\\w\\.])\n        0[bB][01]+[Uu]?([Ll]|[Ss]|[Bb])?\n        (?![\\w\\.])"
                },
                "id": "binary",
                "style-ref": "binary"
            },
            {
                "match": {
                    "extended": true,
                    "content": "(?<![\\w\\.])\n        0[oO][0-7]+[Uu]?([Ll]|[Ss]|[Bb])?\n        (?![\\w\\.])"
                },
                "id": "octal",
                "style-ref": "octal"
            },
            {
                "match": {
                    "extended": true,
                    "content": "(?<![\\w\\.])\n        0[xX][0-9a-fA-F]+[Uu]?([Ll]|[Ss]|[Bb])?\n        (?![\\w\\.])"
                },
                "id": "hexadecimal",
                "style-ref": "hexadecimal"
            },
            {
                "include": {"context": [
                    {"ref": "line-comment"},
                    {"ref": "block-comment"},
                    {"ref": "close-comment-outside-comment"},
                    {"ref": "if-false-comment"},
                    {"ref": "preprocessor"},
                    {"ref": "character"},
                    {"ref": "string"},
                    {"ref": "keywords"},
                    {"ref": "types"},
                    {"ref": "null-value"},
                    {"ref": "boolean"},
                    {"ref": "float"},
                    {"ref": "decimal"},
                    {"ref": "binary"},
                    {"ref": "octal"},
                    {"ref": "hexadecimal"}
                ]},
                "id": "nemerle",
                "class": "no-spell-check"
            }
        ],
        "define-regex": {
            "id": "preproc-start",
            "content": "^\\s*#\\s*"
        }
    }
}}