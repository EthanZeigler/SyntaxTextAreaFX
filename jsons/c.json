{"language": {
    "metadata": {"property": [
        {
            "name": "mimetypes",
            "content": "text/x-c;text/x-csrc;image/x-xpixmap"
        },
        {
            "name": "globs",
            "content": "*.c"
        },
        {
            "name": "line-comment-start",
            "content": "//"
        },
        {
            "name": "block-comment-start",
            "content": "/*"
        },
        {
            "name": "block-comment-end",
            "content": "*/"
        }
    ]},
    "_name": "C",
    "_section": "Source",
    "styles": {"style": [
        {
            "_name": "Comment",
            "map-to": "def:comment",
            "id": "comment"
        },
        {
            "_name": "String",
            "map-to": "def:string",
            "id": "string"
        },
        {
            "_name": "Preprocessor",
            "map-to": "def:preprocessor",
            "id": "preprocessor"
        },
        {
            "_name": "Common Defines",
            "map-to": "def:special-constant",
            "id": "common-defines"
        },
        {
            "_name": "Included File",
            "map-to": "def:string",
            "id": "included-file"
        },
        {
            "_name": "Character",
            "map-to": "def:character",
            "id": "char"
        },
        {
            "_name": "Keyword",
            "map-to": "def:keyword",
            "id": "keyword"
        },
        {
            "_name": "Operator",
            "map-to": "def:operator",
            "id": "operator"
        },
        {
            "_name": "Data Type",
            "map-to": "def:type",
            "id": "type"
        },
        {
            "_name": "Storage Class",
            "map-to": "def:type",
            "id": "storage-class"
        },
        {
            "_name": "printf Conversion",
            "map-to": "def:special-char",
            "id": "printf"
        },
        {
            "_name": "Escaped Character",
            "map-to": "def:special-char",
            "id": "escaped-character"
        },
        {
            "_name": "Floating point number",
            "map-to": "def:floating-point",
            "id": "floating-point"
        },
        {
            "_name": "Decimal number",
            "map-to": "def:decimal",
            "id": "decimal"
        },
        {
            "_name": "Octal number",
            "map-to": "def:base-n-integer",
            "id": "octal"
        },
        {
            "_name": "Hexadecimal number",
            "map-to": "def:base-n-integer",
            "id": "hexadecimal"
        },
        {
            "_name": "Boolean value",
            "map-to": "def:boolean",
            "id": "boolean"
        },
        {
            "_name": "Standard stream",
            "map-to": "def:constant",
            "id": "standard-stream"
        },
        {
            "_name": "Signal name",
            "map-to": "def:constant",
            "id": "signal-name"
        },
        {
            "_name": "Error",
            "map-to": "def:error",
            "id": "error"
        }
    ]},
    "id": "c",
    "version": 2,
    "definitions": {
        "context": [
            {
                "match": {
                    "extended": true,
                    "content": "\\%\\%|\\%\n        (?:[1-9][0-9]*\\$)?      # argument\n        [#0\\-\\ \\+\\'I]*          # flags\n        (?:[1-9][0-9]*|\\*)?     # width\n        (?:\\.\\-?(?:[0-9]+|\\*))? # precision\n        (?:hh|ll|[hlLqjzt])?    # length modifier\n        [diouxXeEfFgGaAcsCSpnm] # conversion specifier"
                },
                "id": "printf",
                "style-ref": "printf",
                "extend-parent": false
            },
            {
                "include": {"context": [
                    {
                        "include": {"context": [
                            {"ref": "if-in-if0"},
                            {"ref": "def:in-comment"}
                        ]},
                        "start": "\\%{preproc-start}if(n?def)?\\b",
                        "end": "\\%{preproc-start}endif\\b",
                        "id": "if-in-if0"
                    },
                    {"ref": "def:in-comment"}
                ]},
                "start": "\\%{preproc-start}if\\b\\s*0\\b",
                "end": "\\%{preproc-start}(endif|else|elif)\\b",
                "id": "if0-comment",
                "style-ref": "comment"
            },
            {
                "include": {"context": {
                    "id": "included-file",
                    "class": "path",
                    "sub-pattern": 2,
                    "style-ref": "included-file"
                }},
                "match": {
                    "extended": true,
                    "content": "\\%{preproc-start}\n        (include|import)\\s*\n        (\".*?\"|<.*>)"
                },
                "id": "include",
                "style-ref": "preprocessor"
            },
            {
                "include": {"context": [
                    {
                        "ref": "def:line-continue",
                        "ignore-style": true
                    },
                    {
                        "ref": "string",
                        "ignore-style": true
                    },
                    {"ref": "def:c-like-comment"},
                    {"ref": "def:c-like-comment-multiline"}
                ]},
                "start": {
                    "extended": true,
                    "content": "\\%{preproc-start}\n        (define|undef|error|pragma|ident|if(n?def)?|else|elif|endif|line|warning)\n        \\b"
                },
                "id": "preprocessor",
                "style-ref": "preprocessor",
                "end-at-line-end": true
            },
            {
                "include": {"context": [
                    {"ref": "printf"},
                    {
                        "match": "\\%{escaped-character}",
                        "id": "escaped-character",
                        "style-ref": "escaped-character"
                    },
                    {"ref": "def:line-continue"}
                ]},
                "class-disabled": "no-spell-check",
                "start": "L?\"",
                "end": "\"",
                "id": "string",
                "class": "string",
                "style-ref": "string",
                "end-at-line-end": true
            },
            {
                "match": "L?'(\\%{escaped-character}|.)'",
                "id": "char",
                "style-ref": "char"
            },
            {
                "match": {
                    "extended": true,
                    "content": "(?<![\\w\\.])\n        ((\\.[0-9]+ | [0-9]+\\.[0-9]*) ([Ee][+-]?[0-9]*)? |\n         ([0-9]+[Ee][+-]?[0-9]*))\n        [fFlL]?\n        (?![\\w\\.])"
                },
                "id": "float",
                "style-ref": "floating-point"
            },
            {
                "match": {
                    "extended": true,
                    "content": "(?<![\\w\\.])\n        0[xX][a-fA-F0-9]+[uUlL]*\n        (?![\\w\\.])"
                },
                "id": "hexadecimal",
                "style-ref": "hexadecimal"
            },
            {
                "match": {
                    "extended": true,
                    "content": "(?<![\\w\\.])\n        0[xX][a-fA-F0-9]*[g-zG-Z][a-zA-Z0-9]*[uUlL]*\n        (?![\\w\\.])"
                },
                "id": "invalid-hexadecimal",
                "style-ref": "error"
            },
            {
                "match": {
                    "extended": true,
                    "content": "(?<![\\w\\.])\n        0[0-7]+[uUlL]*\n        (?![\\w\\.])"
                },
                "id": "octal",
                "style-ref": "octal"
            },
            {
                "match": {
                    "extended": true,
                    "content": "(?<![\\w\\.])\n        0[0-7]*[89][0-9]*[uUlL]*\n        (?![\\w\\.])"
                },
                "id": "invalid-octal",
                "style-ref": "error"
            },
            {
                "match": {
                    "extended": true,
                    "content": "(?<![\\w\\.])\n        (0|[1-9][0-9]*)[uUlL]*\n        (?![\\w\\.])"
                },
                "id": "decimal",
                "style-ref": "decimal"
            },
            {
                "id": "keywords",
                "keyword": [
                    "asm",
                    "break",
                    "case",
                    "continue",
                    "default",
                    "do",
                    "else",
                    "enum",
                    "for",
                    "fortran",
                    "goto",
                    "if",
                    "return",
                    "struct",
                    "switch",
                    "typedef",
                    "union",
                    "while"
                ],
                "style-ref": "keyword"
            },
            {
                "id": "operators",
                "keyword": [
                    "(_A|a)lignof",
                    "_Generic",
                    "offsetof",
                    "(_S|s)tatic_assert",
                    "sizeof",
                    "typeof"
                ],
                "style-ref": "operator"
            },
            {
                "id": "types",
                "keyword": [
                    "_Bool",
                    "_Complex",
                    "_Imaginary",
                    "bool",
                    "char",
                    "char(16|32)_t",
                    "double",
                    "float",
                    "int",
                    "(u)?int(_least|_fast)?(8|16|32|64)_t",
                    "(u)?intmax_t",
                    "(u)?intptr_t",
                    "long",
                    "ptrdiff_t",
                    "off(64)?_t",
                    "short",
                    "signed",
                    "size_t",
                    "ssize_t",
                    "unsigned",
                    "void",
                    "wchar_t",
                    "wint_t"
                ],
                "style-ref": "type"
            },
            {
                "id": "storage-class",
                "keyword": [
                    "(_A|a)lignas",
                    "_Atomic",
                    "(_N|n)oreturn",
                    "(_T|t)hread_local",
                    "auto",
                    "const",
                    "extern",
                    "inline",
                    "register",
                    "restrict",
                    "static",
                    "volatile"
                ],
                "style-ref": "storage-class"
            },
            {
                "id": "boolean",
                "keyword": [
                    true,
                    false
                ],
                "style-ref": "boolean"
            },
            {
                "id": "common-defines",
                "keyword": [
                    null,
                    "MAX",
                    "MIN",
                    true,
                    false,
                    "__LINE__",
                    "__DATA__",
                    "__FILE__",
                    "__func__",
                    "__TIME__",
                    "__STDC__"
                ],
                "style-ref": "common-defines"
            },
            {
                "id": "standard-streams",
                "keyword": [
                    "stdin",
                    "stdout",
                    "stderr"
                ],
                "style-ref": "standard-stream"
            },
            {
                "id": "signals",
                "keyword": [
                    "SIGABRT",
                    "SIGALRM",
                    "SIGCHLD",
                    "SIGCONT",
                    "SIGFPE",
                    "SIGHUP",
                    "SIGILL",
                    "SIGINT",
                    "SIGKILL",
                    "SIGPIPE",
                    "SIGQUIT",
                    "SIGSEGV",
                    "SIGSTOP",
                    "SIGTERM",
                    "SIGTRAP",
                    "SIGTSTP",
                    "SIGTTIN",
                    "SIGTTOU",
                    "SIGUSR1",
                    "SIGUSR2"
                ],
                "style-ref": "signal-name"
            },
            {
                "include": {"context": [
                    {"ref": "gtk-doc:inline-docs-section"},
                    {
                        "ref": "def:c-like-comment",
                        "style-ref": "comment"
                    },
                    {
                        "ref": "def:c-like-comment-multiline",
                        "style-ref": "comment"
                    },
                    {
                        "ref": "def:c-like-close-comment-outside-comment",
                        "style-ref": "comment"
                    },
                    {"ref": "if0-comment"},
                    {"ref": "include"},
                    {"ref": "preprocessor"},
                    {"ref": "string"},
                    {"ref": "char"},
                    {"ref": "float"},
                    {"ref": "hexadecimal"},
                    {"ref": "invalid-hexadecimal"},
                    {"ref": "octal"},
                    {"ref": "invalid-octal"},
                    {"ref": "decimal"},
                    {"ref": "keywords"},
                    {"ref": "operators"},
                    {"ref": "types"},
                    {"ref": "storage-class"},
                    {"ref": "boolean"},
                    {"ref": "common-defines"},
                    {"ref": "standard-streams"},
                    {"ref": "signals"}
                ]},
                "id": "c",
                "class": "no-spell-check"
            }
        ],
        "define-regex": [
            {
                "id": "preproc-start",
                "content": "^\\s*#\\s*"
            },
            {
                "id": "escaped-character",
                "extended": true,
                "content": "\\\\(                   # leading backslash\n      [\\\\\\\"\\'nrbtfav\\?] |   # escaped character\n      [0-7]{1,3} |          # one, two, or three octal digits\n      x[0-9A-Fa-f]+         # 'x' followed by hex digits\n      )"
            }
        ]
    }
}}