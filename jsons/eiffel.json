{"language": {
    "metadata": {"property": [
        {
            "name": "mimetypes",
            "content": "text/x-eiffel"
        },
        {
            "name": "globs",
            "content": "*.e;*.eif"
        },
        {
            "name": "line-comment-start",
            "content": "--"
        }
    ]},
    "_name": "Eiffel",
    "_section": "Source",
    "styles": {"style": [
        {
            "_name": "Comment",
            "map-to": "def:comment",
            "id": "comment"
        },
        {
            "_name": "String",
            "map-to": "def:string",
            "id": "string"
        },
        {
            "_name": "Debug",
            "map-to": "def:preprocessor",
            "id": "debug"
        },
        {
            "_name": "Assertion",
            "map-to": "def:preprocessor",
            "id": "assertion"
        },
        {
            "_name": "Keyword",
            "map-to": "def:keyword",
            "id": "keyword"
        },
        {
            "_name": "Data Type",
            "map-to": "def:type",
            "id": "type"
        },
        {
            "_name": "Design by Contract",
            "map-to": "def:keyword",
            "id": "design-by-contract"
        },
        {
            "_name": "Exception Handling",
            "map-to": "def:keyword",
            "id": "exception-handling"
        },
        {
            "_name": "Predefined Variable",
            "map-to": "def:builtin",
            "id": "predefined-variable"
        },
        {
            "_name": "Escaped Character",
            "map-to": "def:special-char",
            "id": "escaped-character"
        },
        {
            "_name": "Void Value",
            "map-to": "def:special-constant",
            "id": "void"
        },
        {
            "_name": "Boolean Value",
            "map-to": "def:boolean",
            "id": "boolean"
        },
        {
            "_name": "Decimal number",
            "map-to": "def:decimal",
            "id": "decimal"
        },
        {
            "_name": "Hexadecimal number",
            "map-to": "def:base-n-integer",
            "id": "hexadecimal"
        }
    ]},
    "id": "eiffel",
    "version": 2,
    "definitions": {"context": [
        {
            "class-disabled": "no-spell-check",
            "start": "'",
            "end": "'",
            "id": "single-quoted-string",
            "class": "string",
            "style-ref": "string"
        },
        {
            "class-disabled": "no-spell-check",
            "start": "\"\\[",
            "end": "\\]\"",
            "id": "multi-line-string",
            "class": "string",
            "style-ref": "string"
        },
        {
            "include": {"context": {
                "match": {
                    "extended": true,
                    "content": "(\\%\\\"|\\%N|\\%\\%)"
                },
                "id": "escaped-character",
                "style-ref": "escaped-character"
            }},
            "class-disabled": "no-spell-check",
            "start": "\"",
            "end": "\"",
            "id": "double-quoted-string",
            "class": "string",
            "style-ref": "string"
        },
        {
            "include": {"context": {"ref": "def:in-comment"}},
            "class-disabled": "no-spell-check",
            "start": "--",
            "id": "line-comment",
            "class": "comment",
            "style-ref": "comment",
            "end-at-line-end": true
        },
        {
            "start": "(^|\\s)debug(\\s|$)",
            "end": "(^|\\s)end(\\s|$)",
            "id": "debug",
            "style-ref": "debug"
        },
        {
            "start": "(^|\\s)check(\\s|$)",
            "end": "(^|\\s)end(\\s|$)",
            "id": "assertion",
            "style-ref": "assertion"
        },
        {
            "id": "keywords",
            "keyword": [
                "indexing",
                "deferred",
                "expanded",
                "class",
                "obsolete",
                "inherit",
                "insert",
                "rename",
                "as",
                "export",
                "all",
                "undefine",
                "redefine",
                "select",
                "end",
                "(create|creation)",
                "feature",
                "frozen",
                "prefix",
                "infix",
                "is",
                "obsolete",
                "require\\s*(else)?",
                "local",
                "deferred",
                "do",
                "once",
                "external",
                "alias",
                "ensure\\s*(then)?",
                "rescue",
                "end",
                "unique",
                "invariant",
                "end",
                "and\\s*(then)?",
                "or\\s*(else)?",
                "xor",
                "implies",
                "not",
                "retry",
                "if",
                "then",
                "elseif",
                "else",
                "end",
                "inspect",
                "when",
                "end",
                "from",
                "invariant",
                "variant",
                "until",
                "loop",
                "do",
                "end",
                "strip",
                "old",
                "separate",
                "expanded",
                "like"
            ],
            "style-ref": "keyword"
        },
        {
            "id": "predefined-variables",
            "keyword": [
                "Current",
                "Precursor",
                "Result"
            ],
            "style-ref": "predefined-variable"
        },
        {
            "id": "void-value",
            "keyword": "Void",
            "style-ref": "void"
        },
        {
            "id": "boolean",
            "keyword": [
                false,
                true
            ],
            "style-ref": "boolean"
        },
        {
            "match": {
                "extended": true,
                "content": "[A-Z_][A-Z0-9_]+"
            },
            "id": "class-types",
            "style-ref": "type"
        },
        {
            "match": {
                "extended": true,
                "content": "(?<![\\w\\.])\n      (([0-9]+)|([0-9]+\\.[0-9]+([Ee][-]?[0-9]+)?))\n      (?![\\w\\.])"
            },
            "id": "number",
            "style-ref": "decimal"
        },
        {
            "match": {
                "extended": true,
                "content": "(?<![\\w\\.])\n      \\$[0-9a-fA-F]*\n      (?![\\w\\.])"
            },
            "id": "hexadecimal",
            "style-ref": "hexadecimal"
        },
        {
            "include": {"context": [
                {"ref": "single-quoted-string"},
                {"ref": "multi-line-string"},
                {"ref": "double-quoted-string"},
                {"ref": "line-comment"},
                {"ref": "debug"},
                {"ref": "assertion"},
                {"ref": "keywords"},
                {"ref": "predefined-variables"},
                {"ref": "class-types"},
                {"ref": "void-value"},
                {"ref": "boolean"},
                {"ref": "number"},
                {"ref": "hexadecimal"}
            ]},
            "id": "eiffel",
            "class": "no-spell-check"
        }
    ]},
    "default-regex-options": {"case-sensitive": true}
}}