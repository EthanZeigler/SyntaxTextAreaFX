{"language": {
    "metadata": {"property": [
        {
            "name": "globs",
            "content": "*.cg"
        },
        {
            "name": "line-comment-start",
            "content": "//"
        },
        {
            "name": "block-comment-start",
            "content": "/*"
        },
        {
            "name": "block-comment-end",
            "content": "*/"
        }
    ]},
    "_name": "CG Shader Language",
    "_section": "Source",
    "styles": {"style": [
        {
            "_name": "Comment",
            "map-to": "def:comment",
            "id": "comment"
        },
        {
            "_name": "Error",
            "map-to": "def:error",
            "id": "error"
        },
        {
            "_name": "Preprocessor",
            "map-to": "def:preprocessor",
            "id": "preprocessor"
        },
        {
            "_name": "Bindings",
            "map-to": "def:special-constant",
            "id": "bindings"
        },
        {
            "_name": "Included File",
            "map-to": "def:string",
            "id": "included-file"
        },
        {
            "_name": "Keyword",
            "map-to": "def:keyword",
            "id": "keyword"
        },
        {
            "_name": "Data Type",
            "map-to": "def:type",
            "id": "type"
        },
        {
            "_name": "Storage Class",
            "map-to": "def:builtin",
            "id": "storage-class"
        },
        {
            "_name": "Escaped Character",
            "map-to": "def:special-char",
            "id": "escaped-character"
        },
        {
            "_name": "Floating point number",
            "map-to": "def:floating-point",
            "id": "floating-point"
        },
        {
            "_name": "Decimal number",
            "map-to": "def:decimal",
            "id": "decimal"
        },
        {
            "_name": "Octal number",
            "map-to": "def:base-n-integer",
            "id": "octal"
        },
        {
            "_name": "Hexadecimal number",
            "map-to": "def:base-n-integer",
            "id": "hexadecimal"
        },
        {
            "_name": "Boolean value",
            "map-to": "def:boolean",
            "id": "boolean"
        },
        {
            "_name": "Swizzle operator",
            "map-to": "def:operator",
            "id": "swizzle"
        },
        {
            "_name": "Function",
            "map-to": "def:function",
            "id": "function"
        },
        {
            "_name": "Builtin",
            "map-to": "def:preprocessor",
            "id": "builtin"
        }
    ]},
    "id": "cg",
    "version": 2,
    "definitions": {
        "context": {
            "include": {
                "context": [
                    {
                        "include": {"context": {"ref": "def:in-line-comment"}},
                        "class-disabled": "no-spell-check",
                        "start": "//",
                        "id": "comment",
                        "class": "comment",
                        "style-ref": "comment",
                        "end-at-line-end": true
                    },
                    {
                        "include": {"context": {"ref": "def:in-comment"}},
                        "class-disabled": "no-spell-check",
                        "start": "/\\*",
                        "end": "\\*/",
                        "id": "comment-multiline",
                        "class": "comment",
                        "style-ref": "comment"
                    },
                    {
                        "match": "\\*/(?!\\*)",
                        "id": "close-comment-outside-comment",
                        "style-ref": "error"
                    },
                    {
                        "include": {"context": {
                            "id": "included-file",
                            "sub-pattern": 2,
                            "style-ref": "included-file"
                        }},
                        "match": {
                            "extended": true,
                            "content": "\\%{preproc-start}\n                            (include|import)\\s*\n                            (\".*?\"|<.*>)"
                        },
                        "id": "include",
                        "style-ref": "preprocessor"
                    },
                    {
                        "match": {
                            "extended": true,
                            "content": "(?<![\\w\\.])\n                        ((\\.[0-9]+ | [0-9]+\\.[0-9]*) ([Ee][+-]?[0-9]*)? |\n                         ([0-9]+[Ee][+-]?[0-9]*))\n                        [fFlL]?\n                        (?![\\w\\.])"
                        },
                        "id": "float",
                        "style-ref": "floating-point"
                    },
                    {
                        "match": {
                            "extended": true,
                            "content": "(?<![\\w\\.])\n                        0[xX][a-fA-F0-9]+[uUlL]*\n                        (?![\\w\\.])"
                        },
                        "id": "hexadecimal",
                        "style-ref": "hexadecimal"
                    },
                    {
                        "match": {
                            "extended": true,
                            "content": "(?<![\\w\\.])\n                        0[0-7]+[uUlL]*\n                        (?![\\w\\.])"
                        },
                        "id": "octal",
                        "style-ref": "octal"
                    },
                    {
                        "match": {
                            "extended": true,
                            "content": "(?<![\\w\\.])\n                        [0-9]+[uUlL]*\n                        (?![\\w\\.])"
                        },
                        "id": "decimal",
                        "style-ref": "decimal"
                    },
                    {
                        "id": "keywords",
                        "keyword": [
                            "break",
                            "case",
                            "continue",
                            "default",
                            "else",
                            "for",
                            "if",
                            "return",
                            "struct",
                            "switch",
                            "while"
                        ],
                        "style-ref": "keyword"
                    },
                    {
                        "id": "types",
                        "keyword": [
                            "bool",
                            "float",
                            "float2",
                            "float3",
                            "float4",
                            "float2x2",
                            "float3x3",
                            "float4x4",
                            "int",
                            "half",
                            "fixed",
                            "void",
                            "sampler1D",
                            "sampler2D",
                            "sampler3D",
                            "samplerRECT",
                            "samplerCUBE"
                        ],
                        "style-ref": "type"
                    },
                    {
                        "id": "storage-class",
                        "keyword": [
                            "uniform",
                            "out",
                            "inout",
                            "in",
                            "varying"
                        ],
                        "style-ref": "storage-class"
                    },
                    {
                        "id": "bindings",
                        "keyword": [
                            "POSITION",
                            "NORMAL"
                        ],
                        "style-ref": "bindings"
                    },
                    {
                        "match": {
                            "extended": true,
                            "content": "COLOR[0-3]?"
                        },
                        "id": "color-bindings",
                        "style-ref": "bindings"
                    },
                    {
                        "match": {
                            "extended": true,
                            "content": "TEXUNIT([0-9]|1[0-5])?"
                        },
                        "id": "texunit-bindings",
                        "style-ref": "bindings"
                    },
                    {
                        "match": {
                            "extended": true,
                            "content": "TEXCOORD[0-7]?"
                        },
                        "id": "texcoord-bindings",
                        "style-ref": "bindings"
                    },
                    {
                        "include": {"context": {
                            "id": "swizzle-operator",
                            "sub-pattern": 1,
                            "style-ref": "swizzle"
                        }},
                        "match": {
                            "extended": true,
                            "content": "\\.([xyzw]+|[rgba]+)"
                        },
                        "id": "swizzle"
                    },
                    {
                        "id": "boolean",
                        "keyword": [
                            true,
                            false
                        ],
                        "style-ref": "boolean"
                    },
                    {
                        "include": {"context": {
                            "id": "builtin-name",
                            "sub-pattern": 1,
                            "style-ref": "builtin"
                        }},
                        "match": {
                            "extended": true,
                            "content": "(mul|lit|lerp|saturate|abs|cos|acos|sin|asin|tan|atan|all|any|ceil|clamp|\n                        cosh|cross|degress|determinant|dot|exp|exp2|floor|fmod|frac|frexp|isfinite|\n                        isinf|isnan|ldexp|log|log2|log10|max|min|modf|noise|pow|radians|round|\n                        rsqrt|sign|sincos|sinh|smoothstep|step|sqrt|tanh|transpose|distance|\n                        faceforward|length|normalize|reflect|refract|tex1D|tex2D|tex3D|\n                        tex1Dproj|tex2Dproj|tex3Dproj|texRECT|texRECTproj|texCUBE|texCUBEproj|\n                        ddx|ddy|debug)\\s*\\("
                        },
                        "id": "builtin"
                    },
                    {
                        "include": {"context": {
                            "id": "function-name",
                            "sub-pattern": 1,
                            "style-ref": "function"
                        }},
                        "match": {
                            "extended": true,
                            "content": "([a-zA-Z_][a-zA-Z_0-9]*)\\s*\\("
                        },
                        "id": "function"
                    }
                ],
                "define-regex": {
                    "id": "preproc-start",
                    "content": "^\\s*#\\s*"
                }
            },
            "id": "cg",
            "class": "no-spell-check"
        },
        "define-regex": {
            "id": "escaped-character",
            "extended": true,
            "content": "\\\\(                   # leading backslash\n            [\\\\\\\"\\'nrtfav\\?e] |   # escaped character\n            [0-7]{1,3} |          # one, two, or three octal digits\n            x[0-9A-Fa-f]{0,2}     # 'x' followed by zero, one, or two hex digits\n            )"
        }
    }
}}