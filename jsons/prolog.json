{"language": {
    "metadata": {"property": [
        {
            "name": "mimetypes",
            "content": "text/x-prolog"
        },
        {
            "name": "globs",
            "content": "*.prolog"
        },
        {
            "name": "line-comment-start",
            "content": "%"
        },
        {
            "name": "block-comment-start",
            "content": "/*"
        },
        {
            "name": "block-comment-end",
            "content": "*/"
        }
    ]},
    "_name": "Prolog",
    "_section": "Source",
    "styles": {"style": [
        {
            "_name": "Comment",
            "map-to": "def:comment",
            "id": "comment"
        },
        {
            "_name": "Variable",
            "map-to": "def:type",
            "id": "variable"
        },
        {
            "_name": "Keyword",
            "map-to": "def:keyword",
            "id": "keyword"
        },
        {
            "_name": "String",
            "map-to": "def:string",
            "id": "string"
        },
        {
            "_name": "Number",
            "map-to": "def:decimal",
            "id": "number"
        },
        {
            "_name": "Operator",
            "map-to": "def:operator",
            "id": "operator"
        },
        {
            "_name": "Error",
            "map-to": "def:error",
            "id": "error"
        },
        {
            "_name": "Escaped Character",
            "map-to": "def:special-char",
            "id": "escaped-character"
        }
    ]},
    "id": "prolog",
    "version": 2,
    "definitions": {
        "context": [
            {
                "include": {"context": {"ref": "def:in-comment"}},
                "class-disabled": "no-spell-check",
                "start": "%",
                "id": "line-comment",
                "class": "comment",
                "style-ref": "comment",
                "end-at-line-end": true
            },
            {
                "include": {"context": {"ref": "def:in-comment"}},
                "class-disabled": "no-spell-check",
                "start": "/\\*",
                "end": "\\*/",
                "id": "block-comment",
                "class": "comment",
                "style-ref": "comment"
            },
            {
                "match": "\\*/(?!\\*)",
                "id": "close-comment-outside-comment",
                "style-ref": "error"
            },
            {
                "match": "\\b(_|[A-Z][A-Za-z0-9_]*)\\b",
                "id": "variable",
                "style-ref": "variable"
            },
            {
                "prefix": "(?<!\\%{symbolchar})",
                "id": "operators",
                "suffix": "(?!\\%{symbolchar})",
                "keyword": [
                    "=",
                    "==",
                    "=\\\\=",
                    "=:=",
                    "\\|",
                    "<",
                    ">",
                    "=<",
                    ">=",
                    "\\\\=",
                    "\\\\==",
                    "\\\\\\+"
                ],
                "style-ref": "operator"
            },
            {
                "match": "([!;]|:\\-)",
                "id": "special-operators",
                "style-ref": "operator"
            },
            {
                "match": "\\%{escaped-character}",
                "id": "escaped-character",
                "style-ref": "escaped-character"
            },
            {
                "include": {"context": {"ref": "escaped-character"}},
                "class-disabled": "no-spell-check",
                "start": "\"",
                "end": "\"",
                "id": "string",
                "class": "string",
                "style-ref": "string",
                "end-at-line-end": true
            },
            {
                "include": {"context": {"ref": "escaped-character"}},
                "class-disabled": "no-spell-check",
                "start": "'",
                "end": "'",
                "id": "string2",
                "class": "string",
                "style-ref": "string",
                "end-at-line-end": true
            },
            {
                "match": {
                    "extended": true,
                    "content": "\\b[0-9]+(\\.[0-9]+)?\\b"
                },
                "id": "number",
                "style-ref": "number"
            },
            {
                "id": "arith",
                "keyword": [
                    "mod",
                    "div",
                    "abs",
                    "exp",
                    "ln",
                    "log",
                    "sqrt",
                    "round",
                    "trunc",
                    "val",
                    "cos",
                    "sin",
                    "tan",
                    "arctan",
                    "random",
                    "randominit"
                ],
                "style-ref": "keyword"
            },
            {
                "id": "keyword",
                "keyword": [
                    "module",
                    "meta_predicate",
                    "multifile",
                    "dynamic",
                    "abolish",
                    "current_output",
                    "peek_code",
                    "append",
                    "current_predicate",
                    "put_byte",
                    "arg",
                    "current_prolog_flag",
                    "put_char",
                    "asserta",
                    "assert",
                    "fail",
                    "put_code",
                    "assertz",
                    "findall",
                    "read",
                    "at_end_of_stream",
                    "float",
                    "read_term",
                    "atom",
                    "flush_output",
                    "repeat",
                    "atom_chars",
                    "functor",
                    "retract",
                    "atom_codes",
                    "get_byte",
                    "set_input",
                    "atom_concat",
                    "get_char",
                    "set_output",
                    "atom_length",
                    "get_code",
                    "set_prolog_flag",
                    "atomic",
                    "halt",
                    "set_stream_position",
                    "bagof",
                    "integer",
                    "setof",
                    "call",
                    "is",
                    "stream_property",
                    "catch",
                    "nl",
                    "sub_atom",
                    "char_code",
                    "nonvar",
                    "throw",
                    "char_conversion",
                    "number",
                    "clause",
                    "number_chars",
                    "unify_with_occurs_check",
                    "close",
                    "number_codes",
                    "var",
                    "compound",
                    "once",
                    "copy_term",
                    "op",
                    "write",
                    "writeln",
                    "write_canonical",
                    "write_term",
                    "writeq",
                    "current_char_conversion",
                    "open",
                    "current_input",
                    "peek_byte",
                    "current_op",
                    "peek_char",
                    false,
                    true,
                    "consult",
                    "member",
                    "memberchk",
                    "reverse",
                    "permutation",
                    "delete"
                ],
                "style-ref": "keyword"
            },
            {
                "include": {"context": [
                    {"ref": "keyword"},
                    {"ref": "arith"},
                    {"ref": "number"},
                    {"ref": "string"},
                    {"ref": "string2"},
                    {"ref": "special-operators"},
                    {"ref": "operators"},
                    {"ref": "variable"},
                    {"ref": "block-comment"},
                    {"ref": "line-comment"},
                    {"ref": "close-comment-outside-comment"}
                ]},
                "id": "prolog",
                "class": "no-spell-check"
            }
        ],
        "define-regex": [
            {
                "id": "symbolchar",
                "content": "[-!+\\\\|=:&><]"
            },
            {
                "id": "escaped-character",
                "extended": true,
                "content": "\\\\(                   # leading backslash\n            [\\\\\\\"\\'nrbtfav\\?] |   # escaped character\n            [0-7]{1,3} |          # one, two, or three octal digits\n            x[0-9A-Fa-f]+         # 'x' followed by hex digits\n            )"
            }
        ]
    }
}}