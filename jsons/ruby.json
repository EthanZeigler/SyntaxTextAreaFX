{"language": {
    "metadata": {"property": [
        {
            "name": "mimetypes",
            "content": "application/x-ruby;text/x-ruby"
        },
        {
            "name": "globs",
            "content": "*.rb;*.rake;*.gemspec;Rakefile;Capfile;Gemfile"
        },
        {
            "name": "line-comment-start",
            "content": "#"
        }
    ]},
    "_name": "Ruby",
    "_section": "Script",
    "styles": {"style": [
        {
            "_name": "Escaped Character",
            "map-to": "def:special-char",
            "id": "escape"
        },
        {
            "_name": "Comment",
            "map-to": "def:comment",
            "id": "comment"
        },
        {
            "_name": "Attribute Definition",
            "map-to": "def:statement",
            "id": "attribute-definition"
        },
        {
            "_name": "Module handler",
            "map-to": "def:preprocessor",
            "id": "module-handler"
        },
        {
            "_name": "Keyword",
            "map-to": "def:keyword",
            "id": "keyword"
        },
        {
            "_name": "Nil Constant",
            "map-to": "def:special-constant",
            "id": "nil-value"
        },
        {
            "_name": "Boolean value",
            "map-to": "def:boolean",
            "id": "boolean"
        },
        {
            "_name": "Floating point number",
            "map-to": "def:floating-point",
            "id": "floating-point"
        },
        {
            "_name": "Decimal number",
            "map-to": "def:decimal",
            "id": "decimal"
        },
        {
            "_name": "Base-N number",
            "map-to": "def:base-n-integer",
            "id": "base-n-integer"
        },
        {
            "_name": "Numeric literal",
            "map-to": "def:base-n-integer",
            "id": "numeric-literal"
        },
        {
            "_name": "String",
            "map-to": "def:string",
            "id": "string"
        },
        {
            "_name": "Literal",
            "map-to": "def:special-char",
            "id": "literal"
        },
        {
            "_name": "Builtin",
            "map-to": "def:type",
            "id": "builtin"
        },
        {
            "_name": "Constant",
            "map-to": "def:type",
            "id": "constant"
        },
        {
            "_name": "Symbol",
            "map-to": "def:string",
            "id": "symbol"
        },
        {
            "_name": "Special Variable",
            "map-to": "def:identifier",
            "id": "special-variable"
        },
        {
            "_name": "Predefined Variable",
            "map-to": "def:identifier",
            "id": "predefined-variable"
        },
        {
            "_name": "Variable",
            "map-to": "def:identifier",
            "id": "variable"
        },
        {
            "_name": "Heredoc",
            "map-to": "def:string",
            "id": "here-doc"
        },
        {
            "_name": "Heredoc Bound",
            "map-to": "def:string",
            "id": "here-doc-bound"
        },
        {
            "_name": "Regular Expression",
            "map-to": "def:identifier",
            "id": "regex"
        }
    ]},
    "id": "ruby",
    "version": 2,
    "definitions": {
        "context": [
            {
                "match": "\\\\((0-7){3}|(x[a-fA-F0-9]{2})|(c\\S)|([CM]-\\S)|(M-C-\\S)|.)",
                "id": "escape",
                "style-ref": "escape"
            },
            {
                "include": {"context": [
                    {"ref": "escape"},
                    {"ref": "def:in-comment"}
                ]},
                "class-disabled": "no-spell-check",
                "start": "^=begin",
                "end": "^=end",
                "id": "multiline-comment",
                "class": "comment",
                "style-ref": "comment"
            },
            {
                "id": "attribute-definitions",
                "keyword": [
                    "attr",
                    "attr_writer",
                    "attr_reader",
                    "attr_accessor"
                ],
                "style-ref": "attribute-definition"
            },
            {
                "prefix": "(?<![\\w\\.])",
                "id": "definitions",
                "keyword": [
                    "alias",
                    "class",
                    "module",
                    "def",
                    "undef"
                ],
                "style-ref": "keyword"
            },
            {
                "id": "module-handlers",
                "keyword": [
                    "require",
                    "include",
                    "load"
                ],
                "style-ref": "module-handler"
            },
            {
                "id": "keywords",
                "keyword": [
                    "BEGIN",
                    "END",
                    "and",
                    "begin",
                    "break",
                    "case",
                    "catch",
                    "defined?",
                    "do",
                    "else",
                    "elsif",
                    "end",
                    "ensure",
                    "for",
                    "if",
                    "in",
                    "next",
                    "not",
                    "or",
                    "private",
                    "protected",
                    "public",
                    "redo",
                    "rescue",
                    "retry",
                    "return",
                    "then",
                    "throw",
                    "unless",
                    "until",
                    "when",
                    "while",
                    "yield"
                ],
                "style-ref": "keyword"
            },
            {
                "id": "builtins",
                "keyword": [
                    "ARGF",
                    "ARGV",
                    "Abbrev",
                    "ArgumentError",
                    "Array",
                    "Base64",
                    "Benchmark::Tms",
                    "Benchmark",
                    "Bignum",
                    "Binding",
                    "CGI::Cookie",
                    "CGI::HtmlExtension",
                    "CGI::QueryExtension",
                    "CGI::Session::FileStore",
                    "CGI::Session::MemoryStore",
                    "CGI::Session",
                    "CGI",
                    "Class",
                    "Comparable",
                    "Complex",
                    "ConditionVariable",
                    "Continuation",
                    "DATA",
                    "Data",
                    "Date",
                    "DateTime",
                    "Delegator",
                    "Dir",
                    "ENV",
                    "EOFError",
                    "ERB::Util",
                    "ERB",
                    "Enumerable::Enumerator",
                    "Enumerable",
                    "Errno",
                    "Exception",
                    "FalseClass",
                    "File::Constants",
                    "File::Stat",
                    "File",
                    "FileTest",
                    "FileUtils::DryRun",
                    "FileUtils::NoWrite",
                    "FileUtils::StreamUtils",
                    "FileUtils::Verbose",
                    "FileUtils",
                    "Find",
                    "Fixnum",
                    "Float",
                    "FloatDomainError",
                    "Forwardable",
                    "GC",
                    "Generator",
                    "Hash",
                    "IO",
                    "IOError",
                    "Iconv::BrokenLibrary",
                    "Iconv::Failure",
                    "Iconv::IllegalSequence",
                    "Iconv::InvalidCharacter",
                    "Iconv::InvalidEncoding",
                    "Iconv::OutOfRange",
                    "Iconv",
                    "IndexError",
                    "Integer",
                    "Interrupt",
                    "Kernel",
                    "LoadError",
                    "LocalJumpError",
                    "Logger::Application",
                    "Logger::Error",
                    "Logger::Formatter",
                    "Logger::LogDevice::LogDeviceMutex",
                    "Logger::LogDevice",
                    "Logger::Severity",
                    "Logger::ShiftingError",
                    "Logger",
                    "Marshal",
                    "MatchData",
                    "Math",
                    "Matrix",
                    "Method",
                    "Module",
                    "Mutex",
                    "NameError::message",
                    "NameError",
                    "NilClass",
                    "NoMemoryError",
                    "NoMethodError",
                    "NotImplementedError",
                    "Numeric",
                    "Object",
                    "ObjectSpace",
                    "Observable",
                    "PStore::Error",
                    "PStore",
                    "Pathname",
                    "Precision",
                    "Proc",
                    "Process::GID",
                    "Process::Status",
                    "Process::Sys",
                    "Process::UID",
                    "Process",
                    "Queue",
                    "RUBY_PLATFORM",
                    "RUBY_RELEASE_DATE",
                    "RUBY_VERSION",
                    "Range",
                    "RangeError",
                    "Rational",
                    "Regexp",
                    "RegexpError",
                    "RuntimeError",
                    "STDERR",
                    "STDIN",
                    "STDOUT",
                    "ScriptError",
                    "SecurityError",
                    "Set",
                    "Shellwords",
                    "Signal",
                    "SignalException",
                    "SimpleDelegator",
                    "SingleForwardable",
                    "Singleton",
                    "SingletonClassMethods",
                    "SizedQueue",
                    "SortedSet",
                    "StandardError",
                    "String",
                    "StringIO",
                    "StringScanner::Error",
                    "StringScanner",
                    "Struct::Tms",
                    "Struct",
                    "Symbol",
                    "SyncEnumerator",
                    "SyntaxError",
                    "SystemCallError",
                    "SystemExit",
                    "SystemStackError",
                    "Tempfile",
                    "Test::Unit",
                    "Test",
                    "Thread",
                    "ThreadError",
                    "ThreadGroup",
                    "ThreadsWait",
                    "Time",
                    "Timeout::Error",
                    "Timeout",
                    "TrueClass",
                    "TypeError",
                    "URI::BadURIError",
                    "URI::Error",
                    "URI::Escape",
                    "URI::FTP",
                    "URI::Generic",
                    "URI::HTTP",
                    "URI::HTTPS",
                    "URI::InvalidComponentError",
                    "URI::InvalidURIError",
                    "URI::LDAP",
                    "URI::MailTo",
                    "URI::REGEXP::PATTERN",
                    "URI::REGEXP",
                    "URI",
                    "UnboundMethod",
                    "Vector",
                    "YAML",
                    "ZeroDivisionError",
                    "Zlib::BufError",
                    "Zlib::DataError",
                    "Zlib::Deflate",
                    "Zlib::Error",
                    "Zlib::GzipFile::CRCError",
                    "Zlib::GzipFile::Error",
                    "Zlib::GzipFile::LengthError",
                    "Zlib::GzipFile::NoFooter",
                    "Zlib::GzipFile",
                    "Zlib::GzipReader",
                    "Zlib::GzipWriter",
                    "Zlib::Inflate",
                    "Zlib::MemError",
                    "Zlib::NeedDict",
                    "Zlib::StreamEnd",
                    "Zlib::StreamError",
                    "Zlib::VersionError",
                    "Zlib::ZStream",
                    "Zlib",
                    "fatal"
                ],
                "style-ref": "builtin"
            },
            {
                "id": "special-variables",
                "keyword": [
                    "self",
                    "super",
                    "__FILE__",
                    "__LINE__"
                ],
                "style-ref": "special-variable"
            },
            {
                "match": {
                    "extended": true,
                    "content": "\\$([!$&\"'*+,./0:;<=>?@\\`~1-9]|\n           -[0FIKadilpvw]|\n           (deferr|defout|stderr|stdin|stdout|\n            DEBUG|FILENAME|KCODE|LOADED_FEATURES|LOAD_PATH|\n            PROGRAM_NAME|SAFE|VERBOSE)\\b)"
                },
                "id": "predefined-variables",
                "style-ref": "predefined-variable"
            },
            {
                "match": "\\$[a-zA-Z_][a-zA-Z0-9_]*",
                "id": "global-variables",
                "style-ref": "variable"
            },
            {
                "match": "@@[a-zA-Z_][a-zA-Z0-9_]*",
                "id": "class-variables",
                "style-ref": "variable"
            },
            {
                "match": "@[a-zA-Z_][a-zA-Z0-9_]*",
                "id": "instance-variables",
                "style-ref": "variable"
            },
            {
                "match": "(?<!:):[a-zA-Z0-9_]+",
                "id": "symbols",
                "style-ref": "symbol"
            },
            {
                "match": "\\$[1-9][0-9]*",
                "id": "regexp-variables",
                "style-ref": "regex"
            },
            {
                "match": "(::)?\\b[A-Z][A-Za-z0-9_]*\\b",
                "id": "constants",
                "style-ref": "constant"
            },
            {
                "id": "nil-value",
                "keyword": [
                    "NIL",
                    "nil"
                ],
                "style-ref": "nil-value"
            },
            {
                "id": "boolean",
                "keyword": [
                    false,
                    true,
                    false,
                    true
                ],
                "style-ref": "boolean"
            },
            {
                "match": "(?<![\\w\\.])\\%{float}(?![\\w\\.])",
                "id": "float",
                "style-ref": "floating-point"
            },
            {
                "match": "(?<![\\w\\.])([1-9](_?[0-9])*|0)(?![\\w\\.])",
                "id": "decimal",
                "style-ref": "decimal"
            },
            {
                "match": "(?<![\\w\\.])0[xX][0-9A-Fa-f](_?[0-9A-Fa-f])*(?![\\w\\.])",
                "id": "hex",
                "style-ref": "base-n-integer"
            },
            {
                "match": "(?<![\\w\\.])0[0-7](_?[0-7])*(?![\\w\\.])",
                "id": "octal",
                "style-ref": "base-n-integer"
            },
            {
                "match": "(?<![\\w\\.])0[bB][01](_?[01])*(?![\\w\\.])",
                "id": "binary",
                "style-ref": "base-n-integer"
            },
            {
                "match": "(?<![\\w\\.])\\?((\\\\[MC]-){1,2}|\\\\?)\\S",
                "id": "numeric-literal",
                "style-ref": "numeric-literal"
            },
            {
                "include": {"context": [
                    {"ref": "class-variables"},
                    {"ref": "instance-variables"},
                    {"ref": "global-variables"}
                ]},
                "start": "#(?=[@$])",
                "end": "",
                "id": "simple-interpolation"
            },
            {
                "include": {"context": {"ref": "ruby:*"}},
                "start": "#{",
                "end": "}",
                "id": "complex-interpolation"
            },
            {
                "include": {"context": [
                    {"ref": "escape"},
                    {"ref": "def:line-continue"},
                    {"ref": "complex-interpolation"},
                    {"ref": "simple-interpolation"}
                ]},
                "id": "inside-interpolated-string"
            },
            {
                "include": {"context": {"ref": "inside-interpolated-string"}},
                "class-disabled": "no-spell-check",
                "start": "\"",
                "end": "\"",
                "id": "double-quoted-string",
                "class": "string",
                "style-ref": "string"
            },
            {
                "include": {"context": {
                    "match": "\\\\['\\\\]",
                    "style-ref": "escape"
                }},
                "class-disabled": "no-spell-check",
                "start": "'",
                "end": "'",
                "id": "single-quoted-string",
                "class": "string",
                "style-ref": "string"
            },
            {
                "include": {"context": {"ref": "inside-interpolated-string"}},
                "start": "`",
                "end": "`",
                "id": "backtick-quoted-string",
                "style-ref": "string"
            },
            {
                "include": {"context": {"ref": "inside-interpolated-string"}},
                "start": "<<([a-zA-Z_]\\w*)",
                "end": "^\\%{1@start}",
                "id": "here-doc-string",
                "style-inside": true,
                "style-ref": "here-doc"
            },
            {
                "include": {"context": {"ref": "inside-interpolated-string"}},
                "start": "<<-([a-zA-Z_]\\w*)",
                "end": "^\\s*\\%{1@start}",
                "id": "here-doc-indented-string",
                "style-inside": true,
                "style-ref": "here-doc"
            },
            {
                "include": {"context": [
                    {
                        "where": "start",
                        "sub-pattern": 0,
                        "style-ref": "here-doc-bound"
                    },
                    {
                        "where": "end",
                        "sub-pattern": 0,
                        "style-ref": "here-doc-bound"
                    }
                ]},
                "start": "<<'(\\w+)'",
                "end": "^\\%{1@start}",
                "id": "here-doc-single-quoted-string",
                "style-inside": true,
                "style-ref": "here-doc"
            },
            {
                "include": {"context": [
                    {
                        "where": "start",
                        "sub-pattern": 0,
                        "style-ref": "here-doc-bound"
                    },
                    {
                        "where": "end",
                        "sub-pattern": 0,
                        "style-ref": "here-doc-bound"
                    },
                    {"ref": "inside-interpolated-string"}
                ]},
                "start": "<<\"(\\w+)\"",
                "end": "^\\%{1@start}",
                "id": "here-doc-double-quoted-string",
                "style-inside": true,
                "style-ref": "here-doc"
            },
            {
                "include": {"context": [
                    {
                        "include": {"context": [
                            {
                                "where": "start",
                                "sub-pattern": 0,
                                "style-ref": "literal"
                            },
                            {
                                "where": "end",
                                "sub-pattern": 0,
                                "style-ref": "literal"
                            },
                            {"ref": "inside-interpolated-string"},
                            {
                                "start": "\\(",
                                "end": "\\)"
                            }
                        ]},
                        "start": "[%][QWx]?\\(",
                        "end": "\\)",
                        "style-inside": true,
                        "style-ref": "string"
                    },
                    {
                        "include": {"context": [
                            {
                                "where": "start",
                                "sub-pattern": 0,
                                "style-ref": "literal"
                            },
                            {
                                "where": "end",
                                "sub-pattern": 0,
                                "style-ref": "literal"
                            },
                            {"ref": "inside-interpolated-string"},
                            {
                                "start": "\\[",
                                "end": "]"
                            }
                        ]},
                        "start": "[%][QWx]?\\[",
                        "end": "]",
                        "style-inside": true,
                        "style-ref": "string"
                    },
                    {
                        "include": {"context": [
                            {
                                "where": "start",
                                "sub-pattern": 0,
                                "style-ref": "literal"
                            },
                            {
                                "where": "end",
                                "sub-pattern": 0,
                                "style-ref": "literal"
                            },
                            {"ref": "inside-interpolated-string"},
                            {
                                "start": "{",
                                "end": "}"
                            }
                        ]},
                        "start": "[%][QWx]?{",
                        "end": "}",
                        "style-inside": true,
                        "style-ref": "string"
                    },
                    {
                        "include": {"context": [
                            {
                                "where": "start",
                                "sub-pattern": 0,
                                "style-ref": "literal"
                            },
                            {
                                "where": "end",
                                "sub-pattern": 0,
                                "style-ref": "literal"
                            },
                            {"ref": "inside-interpolated-string"},
                            {
                                "start": "<",
                                "end": ">"
                            }
                        ]},
                        "start": "[%][QWx]?<",
                        "end": ">",
                        "style-inside": true,
                        "style-ref": "string"
                    },
                    {
                        "include": {"context": [
                            {
                                "where": "start",
                                "sub-pattern": 0,
                                "style-ref": "literal"
                            },
                            {
                                "where": "end",
                                "sub-pattern": 0,
                                "style-ref": "literal"
                            },
                            {"ref": "inside-interpolated-string"}
                        ]},
                        "start": "[%][QWx]?([^[:alnum:]{<[(])",
                        "end": "\\%{1@start}",
                        "style-inside": true,
                        "style-ref": "string"
                    }
                ]},
                "id": "interpolated-literal"
            },
            {
                "include": {"context": [
                    {
                        "include": {"context": [
                            {
                                "where": "start",
                                "sub-pattern": 0,
                                "style-ref": "literal"
                            },
                            {
                                "where": "end",
                                "sub-pattern": 0,
                                "style-ref": "literal"
                            },
                            {
                                "match": "\\\\['\\\\]",
                                "style-ref": "escape"
                            },
                            {
                                "start": "\\(",
                                "end": "\\)"
                            }
                        ]},
                        "start": "[%][qsw]\\(",
                        "end": "\\)",
                        "style-inside": true,
                        "style-ref": "string"
                    },
                    {
                        "include": {"context": [
                            {
                                "where": "start",
                                "sub-pattern": 0,
                                "style-ref": "literal"
                            },
                            {
                                "where": "end",
                                "sub-pattern": 0,
                                "style-ref": "literal"
                            },
                            {
                                "match": "\\\\['\\\\]",
                                "style-ref": "escape"
                            },
                            {
                                "start": "\\[",
                                "end": "]"
                            }
                        ]},
                        "start": "[%][qsw]\\[",
                        "end": "]",
                        "style-inside": true,
                        "style-ref": "string"
                    },
                    {
                        "include": {"context": [
                            {
                                "where": "start",
                                "sub-pattern": 0,
                                "style-ref": "literal"
                            },
                            {
                                "where": "end",
                                "sub-pattern": 0,
                                "style-ref": "literal"
                            },
                            {
                                "match": "\\\\['\\\\]",
                                "style-ref": "escape"
                            },
                            {
                                "start": "\\{",
                                "end": "\\}"
                            }
                        ]},
                        "start": "[%][qsw]\\{",
                        "end": "\\}",
                        "style-inside": true,
                        "style-ref": "string"
                    },
                    {
                        "include": {"context": [
                            {
                                "where": "start",
                                "sub-pattern": 0,
                                "style-ref": "literal"
                            },
                            {
                                "where": "end",
                                "sub-pattern": 0,
                                "style-ref": "literal"
                            },
                            {
                                "match": "\\\\['\\\\]",
                                "style-ref": "escape"
                            },
                            {
                                "start": "<",
                                "end": ">"
                            }
                        ]},
                        "start": "[%][qsw]<",
                        "end": ">",
                        "style-inside": true,
                        "style-ref": "string"
                    },
                    {
                        "include": {"context": [
                            {
                                "where": "start",
                                "sub-pattern": 0,
                                "style-ref": "literal"
                            },
                            {
                                "where": "end",
                                "sub-pattern": 0,
                                "style-ref": "literal"
                            },
                            {
                                "match": "\\\\['\\\\]",
                                "style-ref": "escape"
                            }
                        ]},
                        "start": "[%][qsw]([^[:alnum:]{<[(])",
                        "end": "\\%{1@start}",
                        "style-inside": true,
                        "style-ref": "string"
                    }
                ]},
                "id": "non-interpolated-literal"
            },
            {
                "start": "(?<!\\\\)[[]",
                "end": "(?<!\\\\)]",
                "id": "regex-bracketed",
                "style-inside": true,
                "style-ref": "escape"
            },
            {
                "include": {"context": [
                    {"ref": "escape"},
                    {"ref": "def:line-continue"},
                    {"ref": "complex-interpolation"},
                    {"ref": "simple-interpolation"},
                    {"ref": "regex-bracketed"}
                ]},
                "start": "\\%r\\|",
                "end": "\\|\\%{regex-opts}",
                "id": "regex-alt-form",
                "style-ref": "regex"
            },
            {
                "include": {"context": [
                    {"ref": "escape"},
                    {"ref": "def:line-continue"},
                    {"ref": "complex-interpolation"},
                    {"ref": "simple-interpolation"},
                    {"ref": "regex-bracketed"}
                ]},
                "start": {
                    "extended": true,
                    "content": "((?<=([(]|\\s))|^)\n        \\/\n        (?=\n          ([^/\\\\]*(\\\\.))*\n          [^/]*\n          \\/\n          \\%{regex-opts}\n          ([),;.]|\\s|$)\n        )"
                },
                "end": "\\/\\%{regex-opts}",
                "id": "regex-simple",
                "style-ref": "regex"
            },
            {
                "include": {"context": [
                    {"ref": "def:shebang"},
                    {"ref": "def:shell-like-comment"},
                    {"ref": "multiline-comment"},
                    {"ref": "here-doc-single-quoted-string"},
                    {"ref": "here-doc-double-quoted-string"},
                    {"ref": "here-doc-string"},
                    {"ref": "here-doc-indented-string"},
                    {"ref": "double-quoted-string"},
                    {"ref": "single-quoted-string"},
                    {"ref": "backtick-quoted-string"},
                    {"ref": "attribute-definitions"},
                    {"ref": "definitions"},
                    {"ref": "module-handlers"},
                    {"ref": "keywords"},
                    {"ref": "builtins"},
                    {"ref": "special-variables"},
                    {"ref": "predefined-variables"},
                    {"ref": "global-variables"},
                    {"ref": "class-variables"},
                    {"ref": "instance-variables"},
                    {"ref": "symbols"},
                    {"ref": "regexp-variables"},
                    {"ref": "constants"},
                    {"ref": "nil-value"},
                    {"ref": "boolean"},
                    {"ref": "float"},
                    {"ref": "decimal"},
                    {"ref": "hex"},
                    {"ref": "octal"},
                    {"ref": "binary"},
                    {"ref": "numeric-literal"},
                    {"ref": "regex-alt-form"},
                    {"ref": "regex-simple"},
                    {"ref": "non-interpolated-literal"},
                    {"ref": "interpolated-literal"}
                ]},
                "id": "ruby",
                "class": "no-spell-check"
            }
        ],
        "define-regex": [
            {
                "id": "underscore_num",
                "content": "\\d(_?\\d)*"
            },
            {
                "id": "float",
                "extended": true,
                "content": "( \\%{underscore_num}\\.\\%{underscore_num} ) |\n      ( (\\%{underscore_num}(\\.\\%{underscore_num})?)[eE][+-]?\\%{underscore_num} )"
            },
            {
                "id": "regex-opts",
                "content": "[iomx]*[neus]?[iomx]*"
            }
        ]
    }
}}