{"language": {
    "metadata": {"property": [
        {
            "name": "mimetypes",
            "content": "text/x-ocaml"
        },
        {
            "name": "globs",
            "content": "*.ml;*.mli;*.mll;*.mly"
        },
        {
            "name": "block-comment-start",
            "content": "(*"
        },
        {
            "name": "block-comment-end",
            "content": "*)"
        }
    ]},
    "_name": "OCaml",
    "_section": "Source",
    "styles": {"style": [
        {
            "_name": "Comment",
            "map-to": "def:comment",
            "id": "comment"
        },
        {
            "_name": "Ocamldoc Comments",
            "map-to": "def:note",
            "id": "ocamldoc"
        },
        {
            "_name": "Base-N Integer",
            "map-to": "def:base-n-integer",
            "id": "base-n-integer"
        },
        {
            "_name": "Floating Point number",
            "map-to": "def:floating-point",
            "id": "floating-point"
        },
        {
            "_name": "Decimal number",
            "map-to": "def:decimal",
            "id": "decimal"
        },
        {
            "_name": "String",
            "map-to": "def:string",
            "id": "string"
        },
        {
            "_name": "Keyword",
            "map-to": "def:keyword",
            "id": "keyword"
        },
        {
            "_name": "Type, module or object keyword",
            "map-to": "def:keyword",
            "id": "meta-keyword"
        },
        {
            "_name": "Builtin-function keyword",
            "map-to": "def:keyword",
            "id": "fun-keyword"
        },
        {
            "_name": "Data Type",
            "map-to": "def:type",
            "id": "type"
        },
        {
            "_name": "Labeled argument",
            "map-to": "def:type",
            "id": "label"
        },
        {
            "_name": "Polymorphic Variant",
            "map-to": "def:type",
            "id": "poly-variant"
        },
        {
            "_name": "Variant Constructor",
            "map-to": "def:type",
            "id": "variant"
        },
        {
            "_name": "Type Variable",
            "map-to": "def:type",
            "id": "type-var"
        },
        {
            "_name": "Module Path",
            "map-to": "def:type",
            "id": "module"
        },
        {
            "_name": "Escaped Character",
            "map-to": "def:special-char",
            "id": "escape"
        },
        {
            "_name": "Boolean value",
            "map-to": "def:boolean",
            "id": "boolean"
        },
        {
            "_name": "Error",
            "map-to": "def:error",
            "id": "error"
        },
        {
            "_name": "Standard Modules",
            "map-to": "def:type",
            "id": "std-modules"
        }
    ]},
    "id": "ocaml",
    "version": 2,
    "definitions": {
        "context": [
            {
                "match": "\\%{char-esc}",
                "id": "escape-seq",
                "style-ref": "escape"
            },
            {
                "include": {"context": [
                    {
                        "include": {"context": [
                            {
                                "include": {"context": [
                                    {"ref": "string"},
                                    {"ref": "comment-in-comment"},
                                    {"ref": "def:in-comment:*"}
                                ]},
                                "class-disabled": "no-spell-check",
                                "start": "\\(\\*",
                                "end": "\\*\\)",
                                "id": "comment-in-comment",
                                "class": "comment",
                                "style-ref": "comment"
                            },
                            {"ref": "string"},
                            {"ref": "def:in-comment:*"}
                        ]},
                        "start": "\\(\\*\\*(?!\\))",
                        "end": "\\*\\)",
                        "id": "ocamldoc",
                        "style-ref": "ocamldoc"
                    },
                    {
                        "include": {"context": [
                            {"ref": "string"},
                            {"ref": "comment-in-comment"},
                            {"ref": "def:in-comment:*"}
                        ]},
                        "class-disabled": "no-spell-check",
                        "start": "\\(\\*",
                        "end": "\\*\\)",
                        "id": "comment",
                        "class": "comment",
                        "style-ref": "comment"
                    },
                    {
                        "match": "[-]?0[xX][0-9A-Fa-f][0-9A-Fa-f_]*[lL]?",
                        "id": "hex-number",
                        "style-ref": "base-n-integer"
                    },
                    {
                        "match": "[-]?0[oO][0-7][0-7_]*[lL]?",
                        "id": "octal-number",
                        "style-ref": "base-n-integer"
                    },
                    {
                        "match": "[-]?0[bB][01][01_]*[lL]?",
                        "id": "binary-number",
                        "style-ref": "base-n-integer"
                    },
                    {
                        "match": "[-]?[0-9][0-9_]*[lLn]?",
                        "id": "decimal",
                        "style-ref": "decimal"
                    },
                    {
                        "match": "[-]?[0-9][0-9_]*(\\.[0-9_]*)?([Ee][+-]?[0-9][0-9_]*)?",
                        "id": "floating-point-number",
                        "style-ref": "floating-point"
                    },
                    {
                        "match": "[~?]\\%{low-ident}",
                        "id": "label",
                        "style-ref": "label"
                    },
                    {
                        "match": "`\\%{cap-ident}",
                        "id": "poly-variant",
                        "style-ref": "poly-variant"
                    },
                    {
                        "match": "\\%{cap-ident}(\\.\\%{cap-ident})*(?=\\.)",
                        "id": "modpath",
                        "style-ref": "module"
                    },
                    {
                        "match": "\\%{cap-ident}",
                        "id": "variant",
                        "style-ref": "variant"
                    },
                    {
                        "include": {"context": {"ref": "escape-seq"}},
                        "start": "\"",
                        "end": "\"",
                        "id": "string",
                        "style-ref": "string"
                    },
                    {
                        "match": "('\\%{char-esc}')|('[^\\\\']')",
                        "id": "character-constant",
                        "style-ref": "string"
                    },
                    {
                        "match": "'\\%{low-ident}",
                        "id": "type-var",
                        "style-ref": "type-var"
                    },
                    {
                        "include": {"context": {"ref": "ocaml"}},
                        "start": "\\[\\|",
                        "end": "\\|\\]",
                        "id": "arraylit"
                    },
                    {
                        "match": "\\|\\]",
                        "id": "badarray",
                        "style-ref": "error",
                        "extend-parent": false
                    },
                    {
                        "include": {"context": {"ref": "ocaml"}},
                        "start": "\\[",
                        "end": "(?<!\\|)\\]",
                        "id": "listlit"
                    },
                    {
                        "match": "\\]",
                        "id": "badlist",
                        "style-ref": "error",
                        "extend-parent": false
                    },
                    {
                        "id": "boolean-constant",
                        "keyword": [
                            true,
                            false
                        ],
                        "style-ref": "boolean"
                    },
                    {
                        "id": "keywords",
                        "keyword": [
                            "and",
                            "assert",
                            "begin",
                            "do",
                            "done",
                            "downto",
                            "else",
                            "end",
                            "for",
                            "fun",
                            "function",
                            "if",
                            "in",
                            "let",
                            "match",
                            "rec",
                            "then",
                            "to",
                            "try",
                            "val",
                            "when",
                            "while",
                            "with"
                        ],
                        "style-ref": "keyword"
                    },
                    {
                        "id": "meta-words",
                        "keyword": [
                            "as",
                            "class",
                            "constraint",
                            "exception",
                            "external",
                            "functor",
                            "include",
                            "inherit",
                            "initializer",
                            "method",
                            "module",
                            "mutable",
                            "new",
                            "object",
                            "of",
                            "open",
                            "private",
                            "struct",
                            "sig",
                            "type",
                            "virtual"
                        ],
                        "style-ref": "meta-keyword"
                    },
                    {
                        "id": "function-keywords",
                        "keyword": [
                            "asr",
                            "land",
                            "lazy",
                            "lor",
                            "lsl",
                            "lsr",
                            "lxor",
                            "mod",
                            "or",
                            "lnot"
                        ],
                        "style-ref": "fun-keyword"
                    },
                    {
                        "id": "types",
                        "keyword": [
                            "option",
                            "ignore",
                            "ref",
                            "array",
                            "bool",
                            "char",
                            "float",
                            "int",
                            "list",
                            "string",
                            "unit"
                        ],
                        "style-ref": "type"
                    },
                    {
                        "id": "standart-modules",
                        "keyword": [
                            "Arg",
                            "Arith_status",
                            "Array",
                            "ArrayLabels",
                            "Big_int",
                            "Bigarray",
                            "Buffer",
                            "Callback",
                            "CamlinternalMod",
                            "CamlinternalOO",
                            "Char",
                            "Complex",
                            "Condition",
                            "Dbm",
                            "Digest",
                            "DynLink",
                            "Event",
                            "Filename",
                            "Format",
                            "Gc",
                            "Genlex",
                            "Graphics",
                            "GraphicsX11",
                            "Hashtbl",
                            "Int32",
                            "Int64",
                            "LargeFile",
                            "Lazy",
                            "Lexing",
                            "List",
                            "ListLabels",
                            "Map",
                            "Marshal",
                            "MoreLabels",
                            "Mutex",
                            "Mativeint",
                            "Num",
                            "Oo",
                            "Parsing",
                            "Printexc",
                            "Printf",
                            "Queue",
                            "Random",
                            "Scanf",
                            "Set",
                            "Sort",
                            "Stack",
                            "StdLabels",
                            "Str",
                            "Stream",
                            "StringLabels",
                            "Sys",
                            "Thread",
                            "ThreadUnix",
                            "Unix",
                            "UnixLabels",
                            "Weak"
                        ],
                        "style-ref": "std-modules"
                    }
                ]},
                "id": "ocaml",
                "class": "no-spell-check"
            }
        ],
        "define-regex": [
            {
                "id": "cap-ident",
                "content": "\\b[A-Z][A-Za-z0-9_']*"
            },
            {
                "id": "low-ident",
                "content": "\\b[a-z][A-Za-z0-9_']*"
            },
            {
                "id": "char-esc",
                "content": "\\\\((\\\\|\"|'|n|t|b|r)|[0-9]{3}|x[0-9a-fA-F]{2})"
            }
        ]
    }
}}